'use strict'
/*
  Open Rowing Monitor, https://github.com/jaapvanekris/openrowingmonitor

  As this object is fundamental for most other utility objects, we must test its behaviour quite thoroughly
*/
import { test } from 'uvu'
import * as assert from 'uvu/assert'

import { createSeries } from './Series.js'

test('Series behaviour with an empty series', () => {
  const dataSeries = createSeries(3)
  assert.ok(dataSeries.length() === 0, `Length should be 0, is ${dataSeries.length()}`)
  assert.ok(dataSeries.atSeriesBegin() === 0, `atSeriesBegin should be 0, is ${dataSeries.atSeriesBegin()}`)
  assert.ok(dataSeries.atSeriesEnd() === 0, `atSeriesEnd should be 0, is ${dataSeries.atSeriesEnd()}`)
  assert.ok(dataSeries.numberOfValuesAbove(0) === 0, `numberOfValuesAbove(0) should be 0, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(0) === 0, `numberOfValuesAbove(0) should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.numberOfValuesAbove(10) === 0, `numberOfValuesAbove(10) should be 0, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(10) === 0, `numberOfValuesAbove(10) should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.sum() === 0, `sum should be 0, is ${dataSeries.sum()}`)
  assert.ok(dataSeries.average() === 0, `average should be 0, is ${dataSeries.average()}`)
  assert.ok(dataSeries.median() === 0, `median should be 0, is ${dataSeries.median()}`)
})

test('Series behaviour with a single pushed value. Series = [9]', () => {
  const dataSeries = createSeries(3)
  dataSeries.push(9)
  assert.ok(dataSeries.length() === 1, `Length should be 1, is ${dataSeries.length()}`)
  assert.ok(dataSeries.atSeriesBegin() === 9, `atSeriesBegin should be 9, is ${dataSeries.atSeriesBegin()}`)
  assert.ok(dataSeries.atSeriesEnd() === 9, `atSeriesEnd should be 9, is ${dataSeries.atSeriesEnd()}`)
  assert.ok(dataSeries.numberOfValuesAbove(0) === 1, `numberOfValuesAbove should be 1, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(0) === 0, `numberOfValuesAbove should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.numberOfValuesAbove(10) === 0, `numberOfValuesAbove(10) should be 0, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(10) === 1, `numberOfValuesAbove(10) should be 1, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.sum() === 9, `sum should be 9, is ${dataSeries.sum()}`)
  assert.ok(dataSeries.average() === 9, `average should be 9, is ${dataSeries.average()}`)
  assert.ok(dataSeries.median() === 9, `median should be 9, is ${dataSeries.median()}`)
})

test('Series behaviour with a second pushed value. Series = [9, 3]', () => {
  const dataSeries = createSeries(3)
  dataSeries.push(9)
  dataSeries.push(3)
  assert.ok(dataSeries.length() === 2, `Length should be 2, is ${dataSeries.length()}`)
  assert.ok(dataSeries.atSeriesBegin() === 9, `atSeriesBegin should be 9, is ${dataSeries.atSeriesBegin()}`)
  assert.ok(dataSeries.atSeriesEnd() === 3, `atSeriesEnd should be 3, is ${dataSeries.atSeriesEnd()}`)
  assert.ok(dataSeries.numberOfValuesAbove(0) === 2, `numberOfValuesAbove should be 2, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(0) === 0, `numberOfValuesAbove should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.numberOfValuesAbove(10) === 0, `numberOfValuesAbove(10) should be 0, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(10) === 2, `numberOfValuesAbove(10) should be 2, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.sum() === 12, `sum should be 12, is ${dataSeries.sum()}`)
  assert.ok(dataSeries.average() === 6, `average should be 6, is ${dataSeries.average()}`)
  assert.ok(dataSeries.median() === 6, `median should be 6, is ${dataSeries.median()}`)
})

test('Series behaviour with a third pushed value. Series = [9, 3, 6]', () => {
  const dataSeries = createSeries(3)
  dataSeries.push(9)
  dataSeries.push(3)
  dataSeries.push(6)
  assert.ok(dataSeries.length() === 3, `Length should be 3, is ${dataSeries.length()}`)
  assert.ok(dataSeries.atSeriesBegin() === 9, `atSeriesBegin should be 9, is ${dataSeries.atSeriesBegin()}`)
  assert.ok(dataSeries.atSeriesEnd() === 6, `atSeriesEnd should be 6, is ${dataSeries.atSeriesEnd()}`)
  assert.ok(dataSeries.numberOfValuesAbove(0) === 3, `numberOfValuesAbove should be 3, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(0) === 0, `numberOfValuesAbove should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.numberOfValuesAbove(10) === 0, `numberOfValuesAbove(10) should be 0, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(10) === 3, `numberOfValuesAbove(10) should be 3, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.sum() === 18, `sum should be 18, is ${dataSeries.sum()}`)
  assert.ok(dataSeries.average() === 6, `average should be 6, is ${dataSeries.average()}`)
  assert.ok(dataSeries.median() === 6, `median should be 6, is ${dataSeries.median()}`)
})

test('Series behaviour with a fourth pushed value. Series = [3, 6, 12]', () => {
  const dataSeries = createSeries(3)
  dataSeries.push(9)
  dataSeries.push(3)
  dataSeries.push(6)
  dataSeries.push(12)
  assert.ok(dataSeries.length() === 3, `Length should be 3, is ${dataSeries.length()}`)
  assert.ok(dataSeries.atSeriesBegin() === 3, `atSeriesBegin should be 3, is ${dataSeries.atSeriesBegin()}`)
  assert.ok(dataSeries.atSeriesEnd() === 12, `atSeriesEnd should be 12, is ${dataSeries.atSeriesEnd()}`)
  assert.ok(dataSeries.numberOfValuesAbove(0) === 3, `numberOfValuesAbove should be 3, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(0) === 0, `numberOfValuesAbove should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.numberOfValuesAbove(10) === 1, `numberOfValuesAbove(10) should be 1, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(10) === 2, `numberOfValuesAbove(10) should be 2, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.sum() === 21, `sum should be 21, is ${dataSeries.sum()}`)
  assert.ok(dataSeries.average() === 7, `average should be 7, is ${dataSeries.average()}`)
  assert.ok(dataSeries.median() === 6, `median should be 6, is ${dataSeries.median()}`)
})

test('Series behaviour with a fifth pushed value. Series = [6, 12, -3]', () => {
  const dataSeries = createSeries(3)
  dataSeries.push(9)
  dataSeries.push(3)
  dataSeries.push(6)
  dataSeries.push(12)
  dataSeries.push(-3)
  assert.ok(dataSeries.length() === 3, `Length should be 3, is ${dataSeries.length()}`)
  assert.ok(dataSeries.atSeriesBegin() === 6, `atSeriesBegin should be 6, is ${dataSeries.atSeriesBegin()}`)
  assert.ok(dataSeries.atSeriesEnd() === -3, `atSeriesEnd should be -3, is ${dataSeries.atSeriesEnd()}`)
  assert.ok(dataSeries.numberOfValuesAbove(0) === 2, `numberOfValuesAbove should be 2, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(0) === 1, `numberOfValuesAbove should be 1, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.numberOfValuesAbove(10) === 1, `numberOfValuesAbove(10) should be 1, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(10) === 2, `numberOfValuesAbove(10) should be 2, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.sum() === 15, `sum should be 15, is ${dataSeries.sum()}`)
  assert.ok(dataSeries.average() === 5, `average should be 5, is ${dataSeries.average()}`)
  assert.ok(dataSeries.median() === 6, `median should be 6, is ${dataSeries.median()}`)
})

test('Series behaviour with a five pushed values followed by a reset, Series = []', () => {
  const dataSeries = createSeries(3)
  dataSeries.push(9)
  dataSeries.push(3)
  dataSeries.push(6)
  dataSeries.push(12)
  dataSeries.push(-3)
  dataSeries.reset()
  assert.ok(dataSeries.length() === 0, `Length should be 0, is ${dataSeries.length()}`)
  assert.ok(dataSeries.atSeriesBegin() === 0, `atSeriesBegin should be 0, is ${dataSeries.atSeriesBegin()}`)
  assert.ok(dataSeries.atSeriesEnd() === 0, `atSeriesEnd should be 0, is ${dataSeries.atSeriesEnd()}`)
  assert.ok(dataSeries.numberOfValuesAbove(0) === 0, `numberOfValuesAbove(0) should be 0, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(0) === 0, `numberOfValuesAbove(0) should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.numberOfValuesAbove(10) === 0, `numberOfValuesAbove(10) should be 0, is ${dataSeries.numberOfValuesAbove(0)}`)
  assert.ok(dataSeries.numberOfValuesEqualOrBelow(10) === 0, `numberOfValuesAbove(10) should be 0, is ${dataSeries.numberOfValuesEqualOrBelow(0)}`)
  assert.ok(dataSeries.sum() === 0, `sum should be 0, is ${dataSeries.sum()}`)
  assert.ok(dataSeries.average() === 0, `average should be 0, is ${dataSeries.average()}`)
  assert.ok(dataSeries.median() === 0, `median should be 0, is ${dataSeries.median()}`)
})

test.run()
