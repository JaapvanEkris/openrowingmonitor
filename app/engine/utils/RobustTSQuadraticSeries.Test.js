'use strict'
/*
  Open Rowing Monitor, https://github.com/jaapvanekris/openrowingmonitor

  This tests the Theil-Senn estimator Quadratic Regression algorithm. As linear regression is an estimation and methods have biasses,
  we need to accept some slack with respect to real-life examples
*/
import { test } from 'uvu'
import * as assert from 'uvu/assert'

import { createTSQuadraticSeries } from './RobustTSQuadraticSeries.js'

test('Quadratic Approximation startup behaviour', () => {
  const dataSeries = createTSQuadraticSeries(10)
  assert.ok(dataSeries.coefficientA() === 0, `coefficientA should be 0 at initialisation, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 0, `coefficientB should be 0 at initialisation, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0, `coefficientC should be 0 at initialisation, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-1, 2)
  assert.ok(dataSeries.coefficientA() === 0, `coefficientA should remain 0 with one datapoint, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 0, `coefficientB should remain 0 with one datapoint, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0, `coefficientC should remain 0 with one datapoint, is ${dataSeries.coefficientC()}`)
  dataSeries.push(0, 2)
  assert.ok(dataSeries.coefficientA() === 0, `coefficientA should remain 0 with two datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 0, `coefficientB should remain 0 with two datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0, `coefficientC should remain 0 with two datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(1, 6)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2 with three datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2 with three datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2 with three datapoints, is ${dataSeries.coefficientC()}`)
})

test('Quadratic Approximation on a perfect noisefree function y = 2 * Math.pow(x, 2) + 2 * x + 2, 21 datapoints', () => {
  // Data based on 2 x^2 + 2 x + 2
  const dataSeries = createTSQuadraticSeries(21)
  dataSeries.push(-10, 182)
  dataSeries.push(-9, 146)
  dataSeries.push(-8, 114)
  dataSeries.push(-7, 86)
  dataSeries.push(-6, 62)
  dataSeries.push(-5, 42)
  dataSeries.push(-4, 26)
  dataSeries.push(-3, 14) // Pi ;)
  dataSeries.push(-2, 6)
  dataSeries.push(-1, 2)
  dataSeries.push(0, 2)
  dataSeries.push(1, 6)
  dataSeries.push(2, 14)
  dataSeries.push(3, 26)
  dataSeries.push(4, 42)
  dataSeries.push(5, 62)
  dataSeries.push(6, 86)
  dataSeries.push(7, 114)
  dataSeries.push(8, 146)
  dataSeries.push(9, 182)
  dataSeries.push(10, 222)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2, is ${dataSeries.coefficientC()}`)
})

test('Quadratic Approximation on a perfect noisefree function y = 2 * Math.pow(x, 2) + 2 * x + 2, with 10 datapoints and some shifting in the series', () => {
  // Data based on 2 x^2 + 2 x + 2, split the dataset in two to see its behaviour when it is around the Vertex
  const dataSeries = createTSQuadraticSeries(10)
  dataSeries.push(-10, 182)
  dataSeries.push(-9, 146)
  dataSeries.push(-8, 114)
  dataSeries.push(-7, 86)
  dataSeries.push(-6, 62)
  dataSeries.push(-5, 42)
  dataSeries.push(-4, 26)
  dataSeries.push(-3, 14) // Pi ;)
  dataSeries.push(-2, 6)
  dataSeries.push(-1, 2)
  dataSeries.push(0, 2)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2 after 11 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2 after 11 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2 after 11 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(1, 6)
  dataSeries.push(2, 14)
  dataSeries.push(3, 26)
  dataSeries.push(4, 42)
  dataSeries.push(5, 62)
  dataSeries.push(6, 86)
  dataSeries.push(7, 114)
  dataSeries.push(8, 146)
  dataSeries.push(9, 182)
  dataSeries.push(10, 222)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2 after 21 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2 after 21 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2 after 21 datapoints, is ${dataSeries.coefficientC()}`)
  // ToDo: Test after moving several points
})

test('Quadratic Approximation on function y = 4 * Math.pow(x, 2) + 4 * x + 4, noisefree', () => {
  // Data based on 4 x^2 + 4 x + 4
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(-11, 444)
  dataSeries.push(-10, 364)
  dataSeries.push(-9, 292)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 3 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 3 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 3 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-8, 228)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 4 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 4 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 4 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-7, 172)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 5 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 5 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 5 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-6, 124)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 6 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 6 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 6 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-5, 84)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 7 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 7 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 7 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-4, 52)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 8 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 8 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 8 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-3, 28)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 9 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 9 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 9 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-2, 12)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 10 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 10 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 10 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-1, 4)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 11 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 11 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 11 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(0, 4)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 12 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 12 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 12 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(1, 12)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 13 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 13 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 13 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(2, 28)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 14 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 14 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 14 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(3, 52)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 15 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 15 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 15 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(4, 84)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 16 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 16 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 16 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(5, 124)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 17 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 17 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 17 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(6, 172)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 18 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 18 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 18 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(7, 228)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 19 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 19 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 19 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(8, 292)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 20 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 20 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 20 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(9, 364)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 21 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 21 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 21 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(10, 444)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 22 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 22 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 22 datapoints, is ${dataSeries.coefficientC()}`)
})

test('Quadratic Approximation on function y = 4 * Math.pow(x, 2) + 4 * x + 4, with some noise (+/- 1)', () => {
  // Data based on 4 x^2 + 4 x + 4
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(-11, 443)
  dataSeries.push(-10, 365)
  dataSeries.push(-9, 291)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2 after 3 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === -36, `coefficientB should be 4 after 3 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === -195, `coefficientC should be 4 after 3 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-8, 229)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 4 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === -8, `coefficientB should be -8 after 4 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === -48.333333333333336, `coefficientC should be -48.333333333333336 after 4 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-7, 171)
  assert.ok(dataSeries.coefficientA() === 3.666666666666667, `coefficientA should be 3.666666666666667 after 5 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === -2, `coefficientB should be -2 after 5 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === -22.666666666666668, `coefficientC should be -22.666666666666668 after 5 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-6, 125)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 6 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 6 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4, `coefficientC should be 4 after 6 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-5, 83)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 7 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 7 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3, `coefficientC should be 3 after 7 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-4, 53)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 8 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 8 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3, `coefficientC should be 3 after 8 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-3, 27)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 9 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 9 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3, `coefficientC should be 3 after 9 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-2, 13)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 10 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 10 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.428571428571429, `coefficientC should be 4.428571428571429 after 10 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-1, 3)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 11 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 11 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3, `coefficientC should be 3 after 11 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(0, 5)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 12 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 12 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 5, `coefficientC should be 5 after 12 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(1, 11)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 13 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 13 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.857142857142857, `coefficientC should be 3.857142857142857 after 13 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(2, 29)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 14 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 14 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.933333333333333, `coefficientC should be 3.933333333333333 after 14 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(3, 51)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 15 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 15 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.022222222222222, `coefficientC should be 4.022222222222222 after 15 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(4, 85)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 16 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 16 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.022222222222222, `coefficientC should be 4.022222222222222 after 16 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(5, 123)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 17 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 17 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.933333333333333, `coefficientC should be 3.933333333333333 after 17 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(6, 173)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 18 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 18 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.111111111111111, `coefficientC should be 4.111111111111111 after 18 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(7, 227)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 19 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 19 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.933333333333333, `coefficientC should be 3.933333333333333 after 19 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(8, 293)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 20 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 20 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.111111111111111, `coefficientC should be 4.111111111111111 after 20 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(9, 363)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 21 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 21 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.933333333333333, `coefficientC should be 3.933333333333333 after 21 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(10, 444)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 22 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 22 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.111111111111111, `coefficientC should be 4.111111111111111 after 22 datapoints, is ${dataSeries.coefficientC()}`) // We get a 3 instead of 4, which is quite acceptable (especially since ORM ignores the C)
})

test('Quadratic Approximation on function y = 4 * Math.pow(x, 2) + 4 * x + 4, with some noise (+/- 1) and spikes (+/- 9)', () => {
  // Data based on 4 x^2 + 4 x + 4
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(-11, 443)
  dataSeries.push(-10, 365)
  dataSeries.push(-9, 291)
  dataSeries.push(-8, 229)
  dataSeries.push(-7, 171)
  dataSeries.push(-6, 125)
  dataSeries.push(-5, 83)
  dataSeries.push(-4, 53)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should be 4 after 8 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 8 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3, `coefficientC should be 3 after 8 datapoints, is ${dataSeries.coefficientC()}`) // We get a 3 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(-3, 37)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 9 datapoints (first spike, +9), is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 6.4, `coefficientB should be 6.4 after 9 datapoints (first spike, +9), is ${dataSeries.coefficientB()}`) // Coefficient B seems to take a hit anyway
  assert.ok(dataSeries.coefficientC() === 12.644444444444446, `coefficientC should remain 12.644444444444446 after 9 datapoints (first spike, +9), is ${dataSeries.coefficientC()}`) // We get a 11.4 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(-2, 3)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 10 datapoints (second spike, -9), is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should return to 4 after 10 datapoints (second spike, -9), is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3, `coefficientC should be 3 after 10 datapoints (second spike, -9), is ${dataSeries.coefficientC()}`) // We get 3 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(-1, 3)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 11 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 3.2888888888888888, `coefficientB should be 3.2888888888888888 after 11 datapoints, is ${dataSeries.coefficientB()}`) // Coefficient B seems to take a hit anyway
  assert.ok(dataSeries.coefficientC() === 2.3333333333333335, `coefficientC should be 2.3333333333333357 after 11 datapoints, is ${dataSeries.coefficientC()}`) // We get a 2.3333333333333357 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(0, 5)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 12 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 3.8095238095238093, `coefficientB should be 3.8095238095238093 after 12 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.238095238095238, `coefficientC should be 4.238095238095238 after 12 datapoints, is ${dataSeries.coefficientC()}`) // We get a 3 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(1, 11)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 13 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should return to 4 after 13 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.72, `coefficientC should be 3.72 after 13 datapoints, is ${dataSeries.coefficientC()}`) // We get a 3.719999999999997 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(2, 29)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 14 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should return to 4 after 14 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 5, `coefficientC should be 5 after 14 datapoints, is ${dataSeries.coefficientC()}`) // We get a 5 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(3, 51)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should return to 4 after 15 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should return to 4 after 15 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.648888888888889, `coefficientC should be 3.648888888888889 after 15 datapoints, is ${dataSeries.coefficientC()}`) // This is quite acceptable as ORM ignores the C
  dataSeries.push(4, 85)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 16 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should remain 4 after 16 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.648888888888889, `coefficientC should be 3.6488888888888877 after 16 datapoints, is ${dataSeries.coefficientC()}`) // This is quite acceptable as ORM ignores the C
  dataSeries.push(5, 123)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 17 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should remain 4 after 17 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.72, `coefficientC should be 3.72 after 17 datapoints, is ${dataSeries.coefficientC()}`) // This is quite acceptable as ORM ignores the C
  dataSeries.push(6, 173)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 18 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should remain 4 after 18 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.111111111111111, `coefficientC should be 4.111111111111111 after 18 datapoints, is ${dataSeries.coefficientC()}`) // This is quite acceptable as ORM ignores the C
  dataSeries.push(7, 227)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 19 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should remain 4 after 19 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.7885714285714287, `coefficientC should be 3.7885714285714287 after 19 datapoints, is ${dataSeries.coefficientC()}`) // This is quite acceptable as ORM ignores the C
  dataSeries.push(8, 293)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 20 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should remain 4 after 20 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.4380952380952383, `coefficientC should be 3.4380952380952383 after 20 datapoints, is ${dataSeries.coefficientC()}`) // This is quite acceptable as ORM ignores the C
  dataSeries.push(9, 363)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 21 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should remain 4 after 21 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 3.72, `coefficientC should remain 3.72 after 21 datapoints, is ${dataSeries.coefficientC()}`) // We get a 3 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(10, 444)
  assert.ok(dataSeries.coefficientA() === 4, `coefficientA should remain 4 after 22 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 4, `coefficientB should remain 4 after 22 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 4.533333333333333, `coefficientC should be 4.533333333333333 after 22 datapoints, is ${dataSeries.coefficientC()}`) // We get a 3 instead of 4, which is quite acceptable (especially since ORM ignores the C)
})

test('Quadratic TS Estimation should be decent for standard real-life example from MathBits with some noise', () => {
  // Data based on https://mathbits.com/MathBits/TISection/Statistics2/quadratic.html
  const dataSeries = createTSQuadraticSeries(13)
  dataSeries.push(10, 115.6)
  dataSeries.push(15, 157.2)
  dataSeries.push(20, 189.2)
  dataSeries.push(24, 220.8)
  dataSeries.push(30, 253.8)
  dataSeries.push(34, 269.2)
  dataSeries.push(40, 284.8)
  dataSeries.push(45, 285.0)
  dataSeries.push(48, 277.4)
  dataSeries.push(50, 269.2)
  dataSeries.push(58, 244.2)
  dataSeries.push(60, 231.4)
  dataSeries.push(64, 180.4)
  assert.ok(dataSeries.coefficientA() === -0.17785023090944152, `coefficientA should be -0.1762309523809523, is ${dataSeries.coefficientA()}`) // In the example, the TI084 results in -0.1737141137, which we consider acceptably close
  assert.ok(dataSeries.coefficientB() === 14.875000000000004, `coefficientB should be 14.875000000000004, is ${dataSeries.coefficientB()}`) // In the example, the TI084 results in 14.52117133, which we consider acceptably close
  assert.ok(dataSeries.coefficientC() === -32.561632653064834, `coefficientC should be -32.56163265306122, is ${dataSeries.coefficientC()}`) // In the example, the TI084 results in -21.89774466, which we consider acceptably close
})

test('Quadratic TS Estimation should be decent for standard real-life example from VarsityTutors with some noise', () => {
  // Test based on https://www.varsitytutors.com/hotmath/hotmath_help/topics/quadratic-regression
  const dataSeries = createTSQuadraticSeries(7)
  dataSeries.push(-3, 7.5)
  dataSeries.push(-2, 3)
  dataSeries.push(-1, 0.5)
  dataSeries.push(0, 1)
  dataSeries.push(1, 3)
  dataSeries.push(2, 6)
  dataSeries.push(3, 14)
  assert.ok(dataSeries.coefficientA() === 1.1166666666666667, `coefficientA should be 1.1166666666666667, is ${dataSeries.coefficientA()}`) // The example results in 1.1071 for OLS, which we consider acceptably close
  assert.ok(dataSeries.coefficientB() === 1.1666666666666667, `coefficientB should be 1.1666666666666667, is ${dataSeries.coefficientB()}`) // The example results in 1 for OLS, which we consider acceptably close
  assert.ok(dataSeries.coefficientC() === 1, `coefficientC should be 1, is ${dataSeries.coefficientC()}`) // The example results in 0.5714 for OLS, which we consider acceptably close
})

test('Quadratic TS Estimation should be decent for standard example from VTUPulse with some noise, without the vertex being part of the dataset', () => {
  // Test based on https://www.vtupulse.com/machine-learning/quadratic-polynomial-regression-model-solved-example/
  const dataSeries = createTSQuadraticSeries(5)
  dataSeries.push(3, 2.5)
  dataSeries.push(4, 3.3)
  dataSeries.push(5, 3.8)
  dataSeries.push(6, 6.5)
  dataSeries.push(7, 11.5)
  assert.ok(dataSeries.coefficientA() === 0.9500000000000005, `coefficientA should be 0.9500000000000005, is ${dataSeries.coefficientA()}`) // The example results in 0.7642857 for OLS, which we consider acceptably close
  assert.ok(dataSeries.coefficientB() === -7.574999999999999, `coefficientB should be -7.574999999999999, is ${dataSeries.coefficientB()}`) // The example results in -5.5128571 for OLS, which we consider acceptably close
  assert.ok(dataSeries.coefficientC() === 17.92500000000001, `coefficientC should be 17.925000000000004, is ${dataSeries.coefficientC()}`) // The example results in 12.4285714 for OLS, which we consider acceptably close
})

test('Quadratic TS Estimation should be decent for standard real-life example from Uni Berlin with some noise without the vertex being part of the dataset', () => {
  // Test based on https://www.geo.fu-berlin.de/en/v/soga/Basics-of-statistics/Linear-Regression/Polynomial-Regression/Polynomial-Regression---An-example/index.html
  const dataSeries = createTSQuadraticSeries(25)
  dataSeries.push(0.001399613, -0.23436656)
  dataSeries.push(0.971629779, 0.64689524)
  dataSeries.push(0.579119475, -0.92635765)
  dataSeries.push(0.335693937, 0.13000706)
  dataSeries.push(0.736736086, -0.89294863)
  dataSeries.push(0.492572335, 0.33854780)
  dataSeries.push(0.737133774, -1.24171910)
  dataSeries.push(0.563693769, -0.22523318)
  dataSeries.push(0.877603280, -0.12962722)
  dataSeries.push(0.141426545, 0.37632006)
  dataSeries.push(0.307203910, 0.30299077)
  dataSeries.push(0.024509308, -0.21162739)
  dataSeries.push(0.843665029, -0.76468719)
  dataSeries.push(0.771206067, -0.90455412)
  dataSeries.push(0.149670258, 0.77097952)
  dataSeries.push(0.359605608, 0.56466366)
  dataSeries.push(0.049612895, 0.18897607)
  dataSeries.push(0.409898906, 0.32531750)
  dataSeries.push(0.935457898, -0.78703491)
  dataSeries.push(0.149476207, 0.80585375)
  dataSeries.push(0.234315216, 0.62944986)
  dataSeries.push(0.455297119, 0.02353327)
  dataSeries.push(0.102696671, 0.27621694)
  dataSeries.push(0.715372314, -1.20379729)
  dataSeries.push(0.681745393, -0.83059624)
  assert.ok(dataSeries.coefficientA() === -3.13052236289358, `coefficientA should be -3.13052236289358, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 1.4334785345517704, `coefficientB should be 1.4334785345517704, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0.09073933224254299, `coefficientC should be 0.09073933224254299, is ${dataSeries.coefficientC()}`)
})

test('Quadratic TS Estimation should be decent for standard real-life example from Statology.org with some noise and chaotic X values', () => {
  // Test based on https://www.statology.org/quadratic-regression-r/
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(6, 14)
  dataSeries.push(9, 28)
  dataSeries.push(12, 50)
  dataSeries.push(14, 70)
  dataSeries.push(30, 89)
  dataSeries.push(35, 94)
  dataSeries.push(40, 90)
  dataSeries.push(47, 75)
  dataSeries.push(51, 59)
  dataSeries.push(55, 44)
  dataSeries.push(60, 27)
  assert.ok(dataSeries.coefficientA() === -0.10466531440162272, `coefficientA should be -0.10466531440162272, is ${dataSeries.coefficientA()}`) // The example results in -0.1012 for R after two rounds, which we consider acceptably close
  assert.ok(dataSeries.coefficientB() === 6.854724080267559, `coefficientB should be 6.854724080267559, is ${dataSeries.coefficientB()}`) // The example results in 6.7444 for R after two rounds, which we consider acceptably close
  assert.ok(dataSeries.coefficientC() === -23.701915708812262, `coefficientC should be -23.701915708812262, is ${dataSeries.coefficientC()}`) // The example results in 18.2536 for R after two rounds, but for ORM, this factor is irrelevant
})

test('Quadratic Approximation with a clean function and a reset', () => {
  // Data based on 2 x^2 + 2 x + 2
  const dataSeries = createTSQuadraticSeries(10)
  dataSeries.push(-10, 182)
  dataSeries.push(-9, 146)
  dataSeries.push(-8, 114)
  dataSeries.push(-7, 86)
  dataSeries.push(-6, 62)
  dataSeries.push(-5, 42)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2 after 6 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2 after 6 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2 after 6 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-4, 26)
  dataSeries.push(-3, 14) // Pi ;)
  dataSeries.push(-2, 6)
  dataSeries.push(-1, 2)
  dataSeries.push(0, 2)
  dataSeries.push(1, 6)
  dataSeries.push(2, 14)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2 after 13 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2 after 13 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2 after 13 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(3, 26)
  dataSeries.push(4, 42)
  dataSeries.push(5, 62)
  dataSeries.push(6, 86)
  dataSeries.push(7, 114)
  dataSeries.push(8, 146)
  dataSeries.push(9, 182)
  dataSeries.push(10, 222)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2 after 21 datapoints, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2 after 21 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2 after 21 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.reset()
  assert.ok(dataSeries.coefficientA() === 0, `coefficientA should be 0 after reset, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 0, `coefficientB should be 0 after reset, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0, `coefficientC should be 0 after reset, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-1, 2)
  assert.ok(dataSeries.coefficientA() === 0, `coefficientA should remain 0 with one datapoint, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 0, `coefficientB should remain 0 with one datapoint, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0, `coefficientC should remain 0 with one datapoint, is ${dataSeries.coefficientC()}`)
  dataSeries.push(0, 2)
  assert.ok(dataSeries.coefficientA() === 0, `coefficientA should remain 0 with two datapoint, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 0, `coefficientB should remain 0 with two datapoint, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0, `coefficientC should remain 0 with two datapoint, is ${dataSeries.coefficientC()}`)
  dataSeries.push(1, 6)
  assert.ok(dataSeries.coefficientA() === 2, `coefficientA should be 2, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 2, `coefficientB should be 2, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 2, `coefficientC should be 2, is ${dataSeries.coefficientC()}`)
})

test('Quadratic TS Estimation should result in a straight line for function y = x', () => {
  // As ORM will encounter straight lines (when forces are balanced on the flywheel, there is no acceleration/deceleration), so we need to test this as well
  const dataSeries = createTSQuadraticSeries(7)
  dataSeries.push(0, 0)
  dataSeries.push(1, 1)
  dataSeries.push(2, 2)
  dataSeries.push(3, 3)
  dataSeries.push(4, 4)
  dataSeries.push(5, 5)
  dataSeries.push(6, 6)
  assert.ok(dataSeries.coefficientA() === 0, `coefficientA should be 0, is ${dataSeries.coefficientA()}`)
  assert.ok(dataSeries.coefficientB() === 1, `coefficientB should be 1, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === 0, `coefficientC should be 0, is ${dataSeries.coefficientC()}`)
})

test('Quadratic TS Estimation should result in a changing coefficientA when the force fluctuates', () => {
  // As ORM will encounter changing forces during the stroke, we simulate this as well
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0.01, 0)
  dataSeries.push(0.02, 0.00000666667)
  dataSeries.push(0.03, 0.0000333333)
  dataSeries.push(0.04, 0.0000933333)
  dataSeries.push(0.05, 0.0002)
  dataSeries.push(0.06, 0.000366667)
  dataSeries.push(0.07, 0.000606667)
  dataSeries.push(0.08, 0.000933333)
  dataSeries.push(0.09, 0.00136)
  dataSeries.push(0.1, 0.0019)
  dataSeries.push(0.11, 0.002566667)
  dataSeries.push(0.12, 0.003373333)
  dataSeries.push(0.13, 0.004333333)
  dataSeries.push(0.14, 0.00546)
  dataSeries.push(0.15, 0.006766667)
  dataSeries.push(0.16, 0.008266667)
  dataSeries.push(0.17, 0.009973333)
  dataSeries.push(0.18, 0.0119)
  dataSeries.push(0.19, 0.01406)
  dataSeries.push(0.2, 0.016466667)
  dataSeries.push(0.21, 0.019133333)
  dataSeries.push(0.22, 0.022073333)
  dataSeries.push(0.23, 0.0253)
  dataSeries.push(0.24, 0.028826667)
  dataSeries.push(0.25, 0.032666667)
  dataSeries.push(0.26, 0.036833333)
  dataSeries.push(0.27, 0.04134)
  dataSeries.push(0.28, 0.0462)
  dataSeries.push(0.29, 0.051426667)
  dataSeries.push(0.3, 0.057033333)
  dataSeries.push(0.31, 0.063033333)
  dataSeries.push(0.32, 0.06944)
  dataSeries.push(0.33, 0.076266667)
  dataSeries.push(0.34, 0.083526667)
  dataSeries.push(0.35, 0.091233333)
  dataSeries.push(0.36, 0.0994)
  dataSeries.push(0.37, 0.10804)
  dataSeries.push(0.38, 0.117166667)
  dataSeries.push(0.39, 0.126793333)
  dataSeries.push(0.4, 0.136933333)
  dataSeries.push(0.41, 0.1476)
  dataSeries.push(0.42, 0.158806667)
  dataSeries.push(0.43, 0.170566667)
  dataSeries.push(0.44, 0.182893333)
  dataSeries.push(0.45, 0.1958)
  dataSeries.push(0.46, 0.2093)
  dataSeries.push(0.47, 0.223406667)
  dataSeries.push(0.48, 0.238133333)
  dataSeries.push(0.49, 0.253493333)
  dataSeries.push(0.5, 0.2695)
  dataSeries.push(0.51, 0.286166667)
  dataSeries.push(0.52, 0.303506667)
  dataSeries.push(0.53, 0.321533333)
  dataSeries.push(0.54, 0.34026)
  dataSeries.push(0.55, 0.3597)
  dataSeries.push(0.56, 0.379866667)
  dataSeries.push(0.57, 0.400773333)
  dataSeries.push(0.58, 0.422433333)
  dataSeries.push(0.59, 0.44486)
  dataSeries.push(0.6, 0.468066667)
  dataSeries.push(0.61, 0.492066667)
  dataSeries.push(0.62, 0.516873333)
  dataSeries.push(0.63, 0.5425)
  dataSeries.push(0.64, 0.56896)
  dataSeries.push(0.65, 0.596266667)
  dataSeries.push(0.66, 0.624433333)
  dataSeries.push(0.67, 0.653473333)
  dataSeries.push(0.68, 0.6834)
  dataSeries.push(0.69, 0.714226667)
  dataSeries.push(0.7, 0.745966667)
  dataSeries.push(0.71, 0.778633333)
  dataSeries.push(0.72, 0.81224)
  dataSeries.push(0.73, 0.8468)
  dataSeries.push(0.74, 0.882326667)
  dataSeries.push(0.75, 0.918833333)
  dataSeries.push(0.76, 0.956333333)
  dataSeries.push(0.77, 0.99484)
  dataSeries.push(0.78, 1.034366667)
  dataSeries.push(0.79, 1.074926667)
  dataSeries.push(0.8, 1.116533333)
  dataSeries.push(0.81, 1.1592)
  dataSeries.push(0.82, 1.20294)
  dataSeries.push(0.83, 1.247766667)
  dataSeries.push(0.84, 1.293693333)
  dataSeries.push(0.85, 1.340733333)
  dataSeries.push(0.86, 1.3889)
  dataSeries.push(0.87, 1.438206667)
  dataSeries.push(0.88, 1.488666667)
  dataSeries.push(0.89, 1.540293333)
  dataSeries.push(0.9, 1.5931)
  dataSeries.push(0.91, 1.6471)
  dataSeries.push(0.92, 1.702306667)
  dataSeries.push(0.93, 1.758733333)
  dataSeries.push(0.94, 1.816393333)
  dataSeries.push(0.95, 1.8753)
  dataSeries.push(0.96, 1.935466667)
  dataSeries.push(0.97, 1.996906667)
  dataSeries.push(0.98, 2.059633333)
  dataSeries.push(0.99, 2.12366)
  dataSeries.push(1, 2.189)
  dataSeries.push(1.01, 2.254875)
  dataSeries.push(1.02, 2.3205)
  dataSeries.push(1.03, 2.385875)
  dataSeries.push(1.04, 2.451)
  dataSeries.push(1.05, 2.515875)
  dataSeries.push(1.06, 2.5805)
  dataSeries.push(1.07, 2.644875)
  dataSeries.push(1.08, 2.709)
  dataSeries.push(1.09, 2.772875)
  dataSeries.push(1.1, 2.8365)
  dataSeries.push(1.11, 2.899875)
  assert.ok(dataSeries.coefficientA() === -1.2499999999804303, `coefficientA should be -1.2499999999804303, is ${dataSeries.coefficientA()}`) // From data generation, Coef A should be -1.25
  assert.ok(dataSeries.slope(dataSeries.length() - 1) === 6.325000000039106, `coefficientB should be 6.325000000039106, is ${dataSeries.slope(dataSeries.length() - 1)}`) // From data generation, Coef B should be 6.325
  dataSeries.push(1.12, 2.963)
  dataSeries.push(1.13, 3.025875)
  dataSeries.push(1.14, 3.0885)
  dataSeries.push(1.15, 3.150875)
  dataSeries.push(1.16, 3.213)
  dataSeries.push(1.17, 3.274875)
  dataSeries.push(1.18, 3.3365)
  dataSeries.push(1.19, 3.397875)
  dataSeries.push(1.2, 3.459)
  dataSeries.push(1.21, 3.519875)
  dataSeries.push(1.22, 3.5805)
  dataSeries.push(1.23, 3.640875)
  dataSeries.push(1.24, 3.701)
  dataSeries.push(1.25, 3.760875)
  dataSeries.push(1.26, 3.8205)
  dataSeries.push(1.27, 3.879875)
  dataSeries.push(1.28, 3.939)
  dataSeries.push(1.29, 3.997875)
  dataSeries.push(1.3, 4.0565)
  dataSeries.push(1.31, 4.114875)
  dataSeries.push(1.32, 4.173)
  dataSeries.push(1.33, 4.230875)
  dataSeries.push(1.34, 4.2885)
  dataSeries.push(1.35, 4.345875)
  dataSeries.push(1.36, 4.403)
  dataSeries.push(1.37, 4.459875)
  dataSeries.push(1.38, 4.5165)
  dataSeries.push(1.39, 4.572875)
  dataSeries.push(1.4, 4.629)
  dataSeries.push(1.41, 4.684875)
  dataSeries.push(1.42, 4.7405)
  dataSeries.push(1.43, 4.795875)
  dataSeries.push(1.44, 4.851)
  dataSeries.push(1.45, 4.905875)
  dataSeries.push(1.46, 4.9605)
  dataSeries.push(1.47, 5.014875)
  dataSeries.push(1.48, 5.069)
  dataSeries.push(1.49, 5.122875)
  dataSeries.push(1.5, 5.1765)
  dataSeries.push(1.51, 5.229875)
  dataSeries.push(1.52, 5.283)
  dataSeries.push(1.53, 5.335875)
  dataSeries.push(1.54, 5.3885)
  dataSeries.push(1.55, 5.440875)
  dataSeries.push(1.56, 5.493)
  dataSeries.push(1.57, 5.544875)
  dataSeries.push(1.58, 5.5965)
  dataSeries.push(1.59, 5.647875)
  dataSeries.push(1.6, 5.699)
  dataSeries.push(1.61, 5.749875)
  dataSeries.push(1.62, 5.8005)
  dataSeries.push(1.63, 5.850875)
  dataSeries.push(1.64, 5.901)
  dataSeries.push(1.65, 5.950875)
  dataSeries.push(1.66, 6.0005)
  dataSeries.push(1.67, 6.049875)
  dataSeries.push(1.68, 6.099)
  dataSeries.push(1.69, 6.147875)
  dataSeries.push(1.7, 6.1965)
  dataSeries.push(1.71, 6.244875)
  dataSeries.push(1.72, 6.293)
  dataSeries.push(1.73, 6.340875)
  dataSeries.push(1.74, 6.3885)
  dataSeries.push(1.75, 6.435875)
  dataSeries.push(1.76, 6.483)
  dataSeries.push(1.77, 6.529875)
  dataSeries.push(1.78, 6.5765)
  dataSeries.push(1.79, 6.622875)
  dataSeries.push(1.8, 6.669)
  dataSeries.push(1.81, 6.714875)
  dataSeries.push(1.82, 6.7605)
  dataSeries.push(1.83, 6.805875)
  dataSeries.push(1.84, 6.851)
  dataSeries.push(1.85, 6.895875)
  dataSeries.push(1.86, 6.9405)
  dataSeries.push(1.87, 6.984875)
  dataSeries.push(1.88, 7.029)
  dataSeries.push(1.89, 7.072875)
  dataSeries.push(1.9, 7.1165)
  dataSeries.push(1.91, 7.159875)
  dataSeries.push(1.92, 7.203)
  dataSeries.push(1.93, 7.245875)
  dataSeries.push(1.94, 7.2885)
  dataSeries.push(1.95, 7.330875)
  dataSeries.push(1.96, 7.373)
  dataSeries.push(1.97, 7.414875)
  dataSeries.push(1.98, 7.4565)
  dataSeries.push(1.99, 7.497875)
  dataSeries.push(2, 7.539)
  dataSeries.push(2.01, 7.579875)
  dataSeries.push(2.02, 7.6205)
  dataSeries.push(2.03, 7.660875)
  dataSeries.push(2.04, 7.701)
  dataSeries.push(2.05, 7.740875)
  dataSeries.push(2.06, 7.7805)
  dataSeries.push(2.07, 7.819875)
  dataSeries.push(2.08, 7.859)
  dataSeries.push(2.09, 7.897875)
  dataSeries.push(2.1, 7.9365)
  dataSeries.push(2.11, 7.974875)
  dataSeries.push(2.12, 8.013)
  dataSeries.push(2.13, 8.050875)
  dataSeries.push(2.14, 8.0885)
  dataSeries.push(2.15, 8.125875)
  dataSeries.push(2.16, 8.163)
  dataSeries.push(2.17, 8.199875)
  dataSeries.push(2.18, 8.2365)
  dataSeries.push(2.19, 8.272875)
  dataSeries.push(2.2, 8.309)
  dataSeries.push(2.21, 8.344875)
  dataSeries.push(2.22, 8.3805)
  dataSeries.push(2.23, 8.415875)
  dataSeries.push(2.24, 8.451)
  dataSeries.push(2.25, 8.485875)
  dataSeries.push(2.26, 8.5205)
  dataSeries.push(2.27, 8.554875)
  dataSeries.push(2.28, 8.589)
  dataSeries.push(2.29, 8.622875)
  dataSeries.push(2.3, 8.6565)
  dataSeries.push(2.31, 8.689875)
  dataSeries.push(2.32, 8.723)
  dataSeries.push(2.33, 8.755875)
  dataSeries.push(2.34, 8.7885)
  dataSeries.push(2.35, 8.820875)
  dataSeries.push(2.36, 8.853)
  dataSeries.push(2.37, 8.884875)
  dataSeries.push(2.38, 8.9165)
  dataSeries.push(2.39, 8.947875)
  dataSeries.push(2.4, 8.979)
  dataSeries.push(2.41, 9.009875)
  dataSeries.push(2.42, 9.0405)
  dataSeries.push(2.43, 9.070875)
  dataSeries.push(2.44, 9.101)
  dataSeries.push(2.45, 9.130875)
  dataSeries.push(2.46, 9.1605)
  dataSeries.push(2.47, 9.189875)
  dataSeries.push(2.48, 9.219)
  dataSeries.push(2.49, 9.247875)
  dataSeries.push(2.5, 9.2765)
  dataSeries.push(2.51, 9.304875)
  dataSeries.push(2.52, 9.333)
  dataSeries.push(2.53, 9.360875)
  dataSeries.push(2.54, 9.3885)
  dataSeries.push(2.55, 9.415875)
  dataSeries.push(2.56, 9.443)
  dataSeries.push(2.57, 9.469875)
  dataSeries.push(2.58, 9.4965)
  dataSeries.push(2.59, 9.522875)
  dataSeries.push(2.6, 9.549)
  dataSeries.push(2.61, 9.574875)
  dataSeries.push(2.62, 9.6005)
  dataSeries.push(2.63, 9.625875)
  dataSeries.push(2.64, 9.651)
  dataSeries.push(2.65, 9.675875)
  dataSeries.push(2.66, 9.7005)
  dataSeries.push(2.67, 9.724875)
  dataSeries.push(2.68, 9.749)
  dataSeries.push(2.69, 9.772875)
  dataSeries.push(2.7, 9.7965)
  dataSeries.push(2.71, 9.819875)
  dataSeries.push(2.72, 9.843)
  dataSeries.push(2.73, 9.865875)
  dataSeries.push(2.74, 9.8885)
  dataSeries.push(2.75, 9.910875)
  dataSeries.push(2.76, 9.933)
  dataSeries.push(2.77, 9.954875)
  dataSeries.push(2.78, 9.9765)
  dataSeries.push(2.79, 9.997875)
  dataSeries.push(2.8, 10.019)
  dataSeries.push(2.81, 10.039875)
  dataSeries.push(2.82, 10.0605)
  dataSeries.push(2.83, 10.080875)
  dataSeries.push(2.84, 10.101)
  dataSeries.push(2.85, 10.120875)
  dataSeries.push(2.86, 10.1405)
  dataSeries.push(2.87, 10.159875)
  dataSeries.push(2.88, 10.179)
  dataSeries.push(2.89, 10.197875)
  dataSeries.push(2.9, 10.2165)
  dataSeries.push(2.91, 10.234875)
  dataSeries.push(2.92, 10.253)
  dataSeries.push(2.93, 10.270875)
  dataSeries.push(2.94, 10.2885)
  dataSeries.push(2.95, 10.305875)
  dataSeries.push(2.96, 10.323)
  dataSeries.push(2.97, 10.339875)
  dataSeries.push(2.98, 10.3565)
  dataSeries.push(2.99, 10.372875)
  assert.ok(dataSeries.coefficientA() === -1.2499999999804303, `coefficientA should be -1.2499999999804303, is ${dataSeries.coefficientA()}`) // From data generation, Coef A should be -1.25
  assert.ok(dataSeries.slope(dataSeries.length() - 1) === 1.625, `coefficientB should be 1.625, is ${dataSeries.slope(dataSeries.length() - 1)}`) // From data generation, Coef B should be 6.325
})

test.run()
