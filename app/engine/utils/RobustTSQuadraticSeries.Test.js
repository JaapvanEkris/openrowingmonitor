'use strict'
/*
  Open Rowing Monitor, https://github.com/jaapvanekris/openrowingmonitor

  This tests the Quadratic Theil-Senn estimator Regression algorithm. As regression is an estimation and methods have biasses,
  we need to accept some slack with respect to real-life examples
*/
import { test } from 'uvu'
import * as assert from 'uvu/assert'

import { createTSQuadraticSeries } from './RobustTSQuadraticSeries.js'

test('Quadratic Approximation startup behaviour', () => {
  const dataSeries = createTSQuadraticSeries(10)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testCoefficientC(dataSeries, 0)
  dataSeries.push(-1, 2)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testCoefficientC(dataSeries, 0)
  dataSeries.push(0, 2)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testCoefficientC(dataSeries, 0)
  dataSeries.push(1, 6)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
})

test('Quadratic Approximation on a perfect noisefree function y = 2 * Math.pow(x, 2) + 2 * x + 2, 21 datapoints', () => {
  // Data based on 2 x^2 + 2 x + 2
  const dataSeries = createTSQuadraticSeries(21)
  dataSeries.push(-10, 182)
  dataSeries.push(-9, 146)
  dataSeries.push(-8, 114)
  dataSeries.push(-7, 86)
  dataSeries.push(-6, 62)
  dataSeries.push(-5, 42)
  dataSeries.push(-4, 26)
  dataSeries.push(-3, 14) // Pi ;)
  dataSeries.push(-2, 6)
  dataSeries.push(-1, 2)
  dataSeries.push(0, 2)
  dataSeries.push(1, 6)
  dataSeries.push(2, 14)
  dataSeries.push(3, 26)
  dataSeries.push(4, 42)
  dataSeries.push(5, 62)
  dataSeries.push(6, 86)
  dataSeries.push(7, 114)
  dataSeries.push(8, 146)
  dataSeries.push(9, 182)
  dataSeries.push(10, 222)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
})

test('Quadratic Approximation on a perfect noisefree function y = 2 * Math.pow(x, 2) + 2 * x + 2, with 10 datapoints and some shifting in the series', () => {
  // Data based on 2 x^2 + 2 x + 2, split the dataset in two to see its behaviour when it is around the Vertex
  const dataSeries = createTSQuadraticSeries(10)
  dataSeries.push(-10, 182)
  dataSeries.push(-9, 146)
  dataSeries.push(-8, 114)
  dataSeries.push(-7, 86)
  dataSeries.push(-6, 62)
  dataSeries.push(-5, 42)
  dataSeries.push(-4, 26)
  dataSeries.push(-3, 14) // Pi ;)
  dataSeries.push(-2, 6)
  dataSeries.push(-1, 2)
  dataSeries.push(0, 2)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
  dataSeries.push(1, 6)
  dataSeries.push(2, 14)
  dataSeries.push(3, 26)
  dataSeries.push(4, 42)
  dataSeries.push(5, 62)
  dataSeries.push(6, 86)
  dataSeries.push(7, 114)
  dataSeries.push(8, 146)
  dataSeries.push(9, 182)
  dataSeries.push(10, 222)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
})

test('Quadratic Approximation on function y = 4 * Math.pow(x, 2) + 4 * x + 4, noisefree', () => {
  // Data based on 4 x^2 + 4 x + 4
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(-11, 444)
  dataSeries.push(-10, 364)
  dataSeries.push(-9, 292)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-8, 228)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-7, 172)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-6, 124)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-5, 84)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-4, 52)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-3, 28)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-2, 12)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-1, 4)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(0, 4)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(1, 12)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(2, 28)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(3, 52)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(4, 84)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(5, 124)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(6, 172)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(7, 228)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(8, 292)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(9, 364)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(10, 444)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
})

test('Quadratic Approximation on function y = 4 * Math.pow(x, 2) + 4 * x + 4, with some noise (+/- 1)', () => {
  // Data based on 4 x^2 + 4 x + 4
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(-11, 443)
  dataSeries.push(-10, 365)
  dataSeries.push(-9, 291)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, -36)
  testCoefficientC(dataSeries, -195)
  dataSeries.push(-8, 229)
  testCoefficientA(dataSeries, 4)
  assert.ok(dataSeries.coefficientB() === -8, `coefficientB should be -8 after 4 datapoints, is ${dataSeries.coefficientB()}`)
  // assert.ok(dataSeries.coefficientB() === 16, `coefficientB should be 16 after 4 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === -48.333333333333336, `coefficientC should be -48.333333333333336 after 4 datapoints, is ${dataSeries.coefficientC()}`)
  // assert.ok(dataSeries.coefficientC() === 58.33333333333333, `coefficientC should be 58.33333333333333 after 4 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-7, 171)
  testCoefficientA(dataSeries, 3.666666666666667)
  assert.ok(dataSeries.coefficientB() === -2, `coefficientB should be -2 after 5 datapoints, is ${dataSeries.coefficientB()}`)
  // assert.ok(dataSeries.coefficientB() === 4, `coefficientB should be 4 after 5 datapoints, is ${dataSeries.coefficientB()}`)
  assert.ok(dataSeries.coefficientC() === -22.666666666666668, `coefficientC should be -22.666666666666668 after 5 datapoints, is ${dataSeries.coefficientC()}`)
  // assert.ok(dataSeries.coefficientC() === 3, `coefficientC should be 3 after 5 datapoints, is ${dataSeries.coefficientC()}`)
  dataSeries.push(-6, 125)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4)
  dataSeries.push(-5, 83)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3)
  dataSeries.push(-4, 53)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3)
  dataSeries.push(-3, 27)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3)
  dataSeries.push(-2, 13)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.428571428571429)
  dataSeries.push(-1, 3)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3)
  dataSeries.push(0, 5)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 5)
  dataSeries.push(1, 11)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.857142857142857)
  dataSeries.push(2, 29)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.933333333333333)
  dataSeries.push(3, 51)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.022222222222222)
  dataSeries.push(4, 85)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.022222222222222)
  dataSeries.push(5, 123)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.933333333333333)
  dataSeries.push(6, 173)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.111111111111111)
  dataSeries.push(7, 227)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.933333333333333)
  dataSeries.push(8, 293)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.111111111111111)
  dataSeries.push(9, 363)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.933333333333333)
  dataSeries.push(10, 444)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.111111111111111) // We consider this quite acceptable as ORM ignores the C coefficient anyways
})

test('Quadratic Approximation on function y = 4 * Math.pow(x, 2) + 4 * x + 4, with some noise (+/- 1) and spikes (+/- 9)', () => {
  // Data based on 4 x^2 + 4 x + 4
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(-11, 443)
  dataSeries.push(-10, 365)
  dataSeries.push(-9, 291)
  dataSeries.push(-8, 229)
  dataSeries.push(-7, 171)
  dataSeries.push(-6, 125)
  dataSeries.push(-5, 83)
  dataSeries.push(-4, 53)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3)
  dataSeries.push(-3, 37) // FIRST SPIKE +9
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 6.4) // Coefficient B seems to take a hit anyway
  testCoefficientC(dataSeries, 12.644444444444446) // We get a 12.6 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(-2, 3) // SECOND SPIKE -9
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3)
  dataSeries.push(-1, 3)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 3.2888888888888888) // Coefficient B seems to take a hit anyway
  testCoefficientC(dataSeries, 2.3333333333333335) // We get a 2.3333333333333357 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(0, 5)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 3.8095238095238093)
  testCoefficientC(dataSeries, 4.238095238095238)
  dataSeries.push(1, 11)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.72) // We get a 3.719999999999997 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(2, 29)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 5) // We get a 5 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(3, 51)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.648888888888889) // This is quite acceptable as ORM ignores the C
  dataSeries.push(4, 85)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.648888888888889) // This is quite acceptable as ORM ignores the C
  dataSeries.push(5, 123)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.72) // This is quite acceptable as ORM ignores the C
  dataSeries.push(6, 173)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.111111111111111) // This is quite acceptable as ORM ignores the C
  dataSeries.push(7, 227)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.7885714285714287) // This is quite acceptable as ORM ignores the C
  dataSeries.push(8, 293)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.4380952380952383) // This is quite acceptable as ORM ignores the C
  dataSeries.push(9, 363)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 3.72) // We get a 3 instead of 4, which is quite acceptable (especially since ORM ignores the C)
  dataSeries.push(10, 444)
  testCoefficientA(dataSeries, 4)
  testCoefficientB(dataSeries, 4)
  testCoefficientC(dataSeries, 4.533333333333333)
})

test('Quadratic TS Estimation should be decent for standard real-life example from MathBits with some noise', () => {
  // Data based on https://mathbits.com/MathBits/TISection/Statistics2/quadratic.html
  const dataSeries = createTSQuadraticSeries(13)
  dataSeries.push(10, 115.6)
  dataSeries.push(15, 157.2)
  dataSeries.push(20, 189.2)
  dataSeries.push(24, 220.8)
  dataSeries.push(30, 253.8)
  dataSeries.push(34, 269.2)
  dataSeries.push(40, 284.8)
  dataSeries.push(45, 285.0)
  dataSeries.push(48, 277.4)
  dataSeries.push(50, 269.2)
  dataSeries.push(58, 244.2)
  dataSeries.push(60, 231.4)
  dataSeries.push(64, 180.4)
  testCoefficientA(dataSeries, -0.17785023090944152) // In the example, the TI084 results in -0.1737141137, which we consider acceptably close
  testCoefficientB(dataSeries, 14.875000000000004) // In the example, the TI084 results in 14.52117133, which we consider acceptably close
  testCoefficientC(dataSeries, -32.561632653064834) // In the example, the TI084 results in -21.89774466, which we consider acceptably close
})

test('Quadratic TS Estimation should be decent for standard real-life example from VarsityTutors with some noise', () => {
  // Test based on https://www.varsitytutors.com/hotmath/hotmath_help/topics/quadratic-regression
  const dataSeries = createTSQuadraticSeries(7)
  dataSeries.push(-3, 7.5)
  dataSeries.push(-2, 3)
  dataSeries.push(-1, 0.5)
  dataSeries.push(0, 1)
  dataSeries.push(1, 3)
  dataSeries.push(2, 6)
  dataSeries.push(3, 14)
  testCoefficientA(dataSeries, 1.1166666666666667) // The example results in 1.1071 for OLS, which we consider acceptably close
  testCoefficientB(dataSeries, 1.1666666666666667) // The example results in 1 for OLS, which we consider acceptably close
  testCoefficientC(dataSeries, 1) // The example results in 0.5714 for OLS, which we consider acceptably close
})

test('Quadratic TS Estimation should be decent for standard example from VTUPulse with some noise, without the vertex being part of the dataset', () => {
  // Test based on https://www.vtupulse.com/machine-learning/quadratic-polynomial-regression-model-solved-example/
  const dataSeries = createTSQuadraticSeries(5)
  dataSeries.push(3, 2.5)
  dataSeries.push(4, 3.3)
  dataSeries.push(5, 3.8)
  dataSeries.push(6, 6.5)
  dataSeries.push(7, 11.5)
  testCoefficientA(dataSeries, 0.9500000000000005) // The example results in 0.7642857 for OLS, which we consider acceptably close given the small sample size
  testCoefficientB(dataSeries, -7.574999999999999) // The example results in -5.5128571 for OLS, which we consider acceptably close given the small sample size
  testCoefficientC(dataSeries, 17.92500000000001) // The example results in 12.4285714 for OLS, which we consider acceptably close given the small sample size
})

test('Quadratic TS Estimation should be decent for standard real-life example from Uni Berlin with some noise without the vertex being part of the dataset', () => {
  // Test based on https://www.geo.fu-berlin.de/en/v/soga/Basics-of-statistics/Linear-Regression/Polynomial-Regression/Polynomial-Regression---An-example/index.html
  const dataSeries = createTSQuadraticSeries(25)
  dataSeries.push(0.001399613, -0.23436656)
  dataSeries.push(0.971629779, 0.64689524)
  dataSeries.push(0.579119475, -0.92635765)
  dataSeries.push(0.335693937, 0.13000706)
  dataSeries.push(0.736736086, -0.89294863)
  dataSeries.push(0.492572335, 0.33854780)
  dataSeries.push(0.737133774, -1.24171910)
  dataSeries.push(0.563693769, -0.22523318)
  dataSeries.push(0.877603280, -0.12962722)
  dataSeries.push(0.141426545, 0.37632006)
  dataSeries.push(0.307203910, 0.30299077)
  dataSeries.push(0.024509308, -0.21162739)
  dataSeries.push(0.843665029, -0.76468719)
  dataSeries.push(0.771206067, -0.90455412)
  dataSeries.push(0.149670258, 0.77097952)
  dataSeries.push(0.359605608, 0.56466366)
  dataSeries.push(0.049612895, 0.18897607)
  dataSeries.push(0.409898906, 0.32531750)
  dataSeries.push(0.935457898, -0.78703491)
  dataSeries.push(0.149476207, 0.80585375)
  dataSeries.push(0.234315216, 0.62944986)
  dataSeries.push(0.455297119, 0.02353327)
  dataSeries.push(0.102696671, 0.27621694)
  dataSeries.push(0.715372314, -1.20379729)
  dataSeries.push(0.681745393, -0.83059624)
  testCoefficientA(dataSeries, -3.13052236289358)
  testCoefficientB(dataSeries, 1.4334785345517704)
  testCoefficientC(dataSeries, 0.09073933224254299)
})

test('Quadratic TS Estimation should be decent for standard real-life example from Statology.org with some noise and chaotic X values', () => {
  // Test based on https://www.statology.org/quadratic-regression-r/
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(6, 14)
  dataSeries.push(9, 28)
  dataSeries.push(12, 50)
  dataSeries.push(14, 70)
  dataSeries.push(30, 89)
  dataSeries.push(35, 94)
  dataSeries.push(40, 90)
  dataSeries.push(47, 75)
  dataSeries.push(51, 59)
  dataSeries.push(55, 44)
  dataSeries.push(60, 27)
  testCoefficientA(dataSeries, -0.10466531440162272) // The example results in -0.1012 for R after two rounds, which we consider acceptably close
  testCoefficientB(dataSeries, 6.854724080267559) // The example results in 6.7444 for R after two rounds, which we consider acceptably close
  testCoefficientC(dataSeries, -23.701915708812262) // The example results in 18.2536 for R after two rounds, but for ORM, this factor is irrelevant
})

test('Quadratic Approximation with a clean function and a reset', () => {
  // Data based on 2 x^2 + 2 x + 2
  const dataSeries = createTSQuadraticSeries(10)
  dataSeries.push(-10, 182)
  dataSeries.push(-9, 146)
  dataSeries.push(-8, 114)
  dataSeries.push(-7, 86)
  dataSeries.push(-6, 62)
  dataSeries.push(-5, 42)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
  dataSeries.push(-4, 26)
  dataSeries.push(-3, 14) // Pi ;)
  dataSeries.push(-2, 6)
  dataSeries.push(-1, 2)
  dataSeries.push(0, 2)
  dataSeries.push(1, 6)
  dataSeries.push(2, 14)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
  dataSeries.push(3, 26)
  dataSeries.push(4, 42)
  dataSeries.push(5, 62)
  dataSeries.push(6, 86)
  dataSeries.push(7, 114)
  dataSeries.push(8, 146)
  dataSeries.push(9, 182)
  dataSeries.push(10, 222)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
  dataSeries.reset()
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testCoefficientC(dataSeries, 0)
  dataSeries.push(-1, 2)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testCoefficientC(dataSeries, 0)
  dataSeries.push(0, 2)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testCoefficientC(dataSeries, 0)
  dataSeries.push(1, 6)
  testCoefficientA(dataSeries, 2)
  testCoefficientB(dataSeries, 2)
  testCoefficientC(dataSeries, 2)
})

test('Quadratic TS Estimation should result in a straight line for function y = x', () => {
  // As ORM will encounter straight lines (when forces are balanced on the flywheel, there is no acceleration/deceleration), so we need to test this as well
  const dataSeries = createTSQuadraticSeries(7)
  dataSeries.push(0, 0)
  dataSeries.push(1, 1)
  dataSeries.push(2, 2)
  dataSeries.push(3, 3)
  dataSeries.push(4, 4)
  dataSeries.push(5, 5)
  dataSeries.push(6, 6)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 1)
  testCoefficientC(dataSeries, 0)
})

test('Quadratic TS Estimation should result in a changing coefficientA with a constant force increase, without noise', () => {
  // As ORM will encounter changing forces during the stroke, we simulate this as well
  // Data based on an acceleration of 0,075 * X, where Y is the distance (based on Distance = 0,0375 * t^3
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0.01, 0)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0)
  testSlope(dataSeries, 6, 0)
  testSlope(dataSeries, 5, 0)
  testSlope(dataSeries, 4, 0)
  testSlope(dataSeries, 3, 0)
  testSlope(dataSeries, 2, 0)
  testSlope(dataSeries, 1, 0)
  testSlope(dataSeries, 0, 0)
  dataSeries.push(0.02, 0.00000666667)
  testCoefficientA(dataSeries, 0)
  testCoefficientB(dataSeries, 0)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0)
  testSlope(dataSeries, 6, 0)
  testSlope(dataSeries, 5, 0)
  testSlope(dataSeries, 4, 0)
  testSlope(dataSeries, 3, 0)
  testSlope(dataSeries, 2, 0)
  testSlope(dataSeries, 1, 0)
  testSlope(dataSeries, 0, 0)
  dataSeries.push(0.03, 0.0000333333)
  testCoefficientA(dataSeries, 0.09999980000000004)
  testCoefficientB(dataSeries, -0.002333327000000001)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0)
  testSlope(dataSeries, 6, 0)
  testSlope(dataSeries, 5, 0)
  testSlope(dataSeries, 4, 0)
  testSlope(dataSeries, 3, 0)
  testSlope(dataSeries, 2, 0.003666661000000001)
  testSlope(dataSeries, 1, 0.0016666650000000008)
  testSlope(dataSeries, 0, -0.0003333310000000001)
  dataSeries.push(0.04, 0.0000933333)
  testCoefficientA(dataSeries, 0.13333332500000003)
  testCoefficientB(dataSeries, -0.0029999975000000005)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0)
  testSlope(dataSeries, 6, 0)
  testSlope(dataSeries, 5, 0)
  testSlope(dataSeries, 4, 0)
  testSlope(dataSeries, 3, 0.007666668500000003)
  testSlope(dataSeries, 2, 0.005000002000000002)
  testSlope(dataSeries, 1, 0.0023333355000000012)
  testSlope(dataSeries, 0, -0.00033333099999999964)
  dataSeries.push(0.05, 0.0002)
  testCoefficientA(dataSeries, 0.16666679999999995)
  testCoefficientB(dataSeries, -0.005333342249999995)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0)
  testSlope(dataSeries, 6, 0)
  testSlope(dataSeries, 5, 0)
  testSlope(dataSeries, 4, 0.011333337750000002)
  testSlope(dataSeries, 3, 0.008000001750000003)
  testSlope(dataSeries, 2, 0.004666665750000001)
  testSlope(dataSeries, 1, 0.0013333297500000034)
  testSlope(dataSeries, 0, -0.002000006249999996)
  dataSeries.push(0.06, 0.000366667)
  testCoefficientA(dataSeries, 0.20000025416666667)
  testCoefficientB(dataSeries, -0.006333345999999996)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0)
  testSlope(dataSeries, 6, 0)
  testSlope(dataSeries, 5, 0.0176666845)
  testSlope(dataSeries, 4, 0.013666679416666671)
  testSlope(dataSeries, 3, 0.009666674333333337)
  testSlope(dataSeries, 2, 0.005666669250000003)
  testSlope(dataSeries, 1, 0.001666664166666671)
  testSlope(dataSeries, 0, -0.0023333409166666624)
  dataSeries.push(0.07, 0.000606667)
  testCoefficientA(dataSeries, 0.2333335555555554)
  testCoefficientB(dataSeries, -0.009666698750000008)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0)
  testSlope(dataSeries, 6, 0.022999999027777752)
  testSlope(dataSeries, 5, 0.01833332791666664)
  testSlope(dataSeries, 4, 0.013666656805555535)
  testSlope(dataSeries, 3, 0.008999985694444424)
  testSlope(dataSeries, 2, 0.004333314583333315)
  testSlope(dataSeries, 1, -0.0003333565277777919)
  testSlope(dataSeries, 0, -0.0050000276388889)
  dataSeries.push(0.08, 0.000933333)
  testCoefficientA(dataSeries, 0.2666669749999998)
  testCoefficientB(dataSeries, -0.011000018699999994)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0)
  testSlope(dataSeries, 7, 0.03166669729999998)
  testSlope(dataSeries, 6, 0.026333357799999978)
  testSlope(dataSeries, 5, 0.02100001829999998)
  testSlope(dataSeries, 4, 0.015666678799999986)
  testSlope(dataSeries, 3, 0.010333339299999992)
  testSlope(dataSeries, 2, 0.004999999799999993)
  testSlope(dataSeries, 1, -0.0003333397000000009)
  testSlope(dataSeries, 0, -0.0056666791999999975)
  dataSeries.push(0.09, 0.00136)
  testCoefficientA(dataSeries, 0.30000018749999996)
  testCoefficientB(dataSeries, -0.015111118916666664)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0)
  testSlope(dataSeries, 8, 0.03888891483333332)
  testSlope(dataSeries, 7, 0.032888911083333326)
  testSlope(dataSeries, 6, 0.02688890733333333)
  testSlope(dataSeries, 5, 0.020888903583333326)
  testSlope(dataSeries, 4, 0.014888899833333332)
  testSlope(dataSeries, 3, 0.008888896083333332)
  testSlope(dataSeries, 2, 0.002888892333333332)
  testSlope(dataSeries, 1, -0.003111111416666666)
  testSlope(dataSeries, 0, -0.009111115166666666)
  dataSeries.push(0.1, 0.0019)
  testCoefficientA(dataSeries, 0.33333322291666645)
  testCoefficientB(dataSeries, -0.016888943666666677)
  testSlope(dataSeries, 10, 0)
  testSlope(dataSeries, 9, 0.04977770091666662)
  testSlope(dataSeries, 8, 0.04311103645833328)
  testSlope(dataSeries, 7, 0.036444371999999954)
  testSlope(dataSeries, 6, 0.02977770754166663)
  testSlope(dataSeries, 5, 0.023111043083333296)
  testSlope(dataSeries, 4, 0.01644437862499997)
  testSlope(dataSeries, 3, 0.009777714166666639)
  testSlope(dataSeries, 2, 0.00311104970833331)
  testSlope(dataSeries, 1, -0.003555614750000019)
  testSlope(dataSeries, 0, -0.010222279208333348)
  dataSeries.push(0.11, 0.002566667)
  testCoefficientA(dataSeries, 0.3666662777777779)
  testCoefficientB(dataSeries, -0.02188884166666667)
  testSlope(dataSeries, 10, 0.05877773944444446)
  testSlope(dataSeries, 9, 0.0514444138888889)
  testSlope(dataSeries, 8, 0.04411108833333334)
  testSlope(dataSeries, 7, 0.03677776277777779)
  testSlope(dataSeries, 6, 0.02944443722222224)
  testSlope(dataSeries, 5, 0.022111111666666673)
  testSlope(dataSeries, 4, 0.014777786111111118)
  testSlope(dataSeries, 3, 0.007444460555555563)
  testSlope(dataSeries, 2, 0.00011113500000000179)
  testSlope(dataSeries, 1, -0.007222190555555553)
  testSlope(dataSeries, 0, -0.014555516111111111)
  dataSeries.push(0.12, 0.003373333)
  testCoefficientA(dataSeries, 0.39999956250000007)
  testCoefficientB(dataSeries, -0.024555497619047614)
  testSlope(dataSeries, 10, 0.0714443973809524)
  testSlope(dataSeries, 9, 0.0634444061309524)
  testSlope(dataSeries, 8, 0.055444414880952406)
  testSlope(dataSeries, 7, 0.0474444236309524)
  testSlope(dataSeries, 6, 0.039444432380952396)
  testSlope(dataSeries, 5, 0.0314444411309524)
  testSlope(dataSeries, 4, 0.023444449880952394)
  testSlope(dataSeries, 3, 0.015444458630952396)
  testSlope(dataSeries, 2, 0.007444467380952391)
  testSlope(dataSeries, 1, -0.0005555238690476104)
  testSlope(dataSeries, 0, -0.008555515119047612)
  dataSeries.push(0.13, 0.004333333)
  testCoefficientA(dataSeries, 0.43333294444444437)
  testCoefficientB(dataSeries, -0.030555500555555563)
  testSlope(dataSeries, 10, 0.08211106499999998)
  testSlope(dataSeries, 9, 0.07344440611111108)
  testSlope(dataSeries, 8, 0.0647777472222222)
  testSlope(dataSeries, 7, 0.05611108833333332)
  testSlope(dataSeries, 6, 0.04744442944444442)
  testSlope(dataSeries, 5, 0.038777770555555535)
  testSlope(dataSeries, 4, 0.030111111666666652)
  testSlope(dataSeries, 3, 0.021444452777777758)
  testSlope(dataSeries, 2, 0.012777793888888878)
  testSlope(dataSeries, 1, 0.0041111349999999845)
  testSlope(dataSeries, 0, -0.004555523888888902)
  dataSeries.push(0.14, 0.00546)
  testCoefficientA(dataSeries, 0.4666667916666668)
  testCoefficientB(dataSeries, -0.034333249999999996)
  testSlope(dataSeries, 10, 0.09633345166666672)
  testSlope(dataSeries, 9, 0.08700011583333338)
  testSlope(dataSeries, 8, 0.07766678000000003)
  testSlope(dataSeries, 7, 0.0683334441666667)
  testSlope(dataSeries, 6, 0.05900010833333337)
  testSlope(dataSeries, 5, 0.049666772500000025)
  testSlope(dataSeries, 4, 0.040333436666666694)
  testSlope(dataSeries, 3, 0.031000100833333363)
  testSlope(dataSeries, 2, 0.02166676500000002)
  testSlope(dataSeries, 1, 0.012333429166666687)
  testSlope(dataSeries, 0, 0.0030000933333333493)
  dataSeries.push(0.15, 0.006766667)
  testCoefficientA(dataSeries, 0.5000031250000017)
  testCoefficientB(dataSeries, -0.04166677958333334)
  testSlope(dataSeries, 10, 0.10833415791666715)
  testSlope(dataSeries, 9, 0.09833409541666713)
  testSlope(dataSeries, 8, 0.08833403291666708)
  testSlope(dataSeries, 7, 0.07833397041666705)
  testSlope(dataSeries, 6, 0.06833390791666702)
  testSlope(dataSeries, 5, 0.058333845416667)
  testSlope(dataSeries, 4, 0.048333782916666956)
  testSlope(dataSeries, 3, 0.038333720416666925)
  testSlope(dataSeries, 2, 0.028333657916666893)
  testSlope(dataSeries, 1, 0.018333595416666855)
  testSlope(dataSeries, 0, 0.00833353291666683)
  dataSeries.push(0.16, 0.008266667)
  testCoefficientA(dataSeries, 0.5666657812499931)
  testCoefficientB(dataSeries, -0.04933332527499995)
  testSlope(dataSeries, 10, 0.13199972472499785)
  testSlope(dataSeries, 9, 0.12066640909999798)
  testSlope(dataSeries, 8, 0.10933309347499814)
  testSlope(dataSeries, 7, 0.09799977784999828)
  testSlope(dataSeries, 6, 0.08666646222499838)
  testSlope(dataSeries, 5, 0.07533314659999854)
  testSlope(dataSeries, 4, 0.06399983097499867)
  testSlope(dataSeries, 3, 0.052666515349998805)
  testSlope(dataSeries, 2, 0.04133319972499895)
  testSlope(dataSeries, 1, 0.029999884099999097)
  testSlope(dataSeries, 0, 0.018666568474999215)
  dataSeries.push(0.17, 0.009973333)
  testCoefficientA(dataSeries, 0.6000000000000003)
  testCoefficientB(dataSeries, -0.05655558999999996)
  testSlope(dataSeries, 10, 0.14744441000000016)
  testSlope(dataSeries, 9, 0.13544441000000015)
  testSlope(dataSeries, 8, 0.12344441000000012)
  testSlope(dataSeries, 7, 0.11144441000000013)
  testSlope(dataSeries, 6, 0.09944441000000012)
  testSlope(dataSeries, 5, 0.08744441000000011)
  testSlope(dataSeries, 4, 0.0754444100000001)
  testSlope(dataSeries, 3, 0.0634444100000001)
  testSlope(dataSeries, 2, 0.05144441000000009)
  testSlope(dataSeries, 1, 0.039444410000000096)
  testSlope(dataSeries, 0, 0.027444410000000086)
  dataSeries.push(0.18, 0.0119)
  testCoefficientA(dataSeries, 0.6666650000000048)
  testCoefficientB(dataSeries, -0.0665555905555556)
  testSlope(dataSeries, 10, 0.17344380944444612)
  testSlope(dataSeries, 9, 0.16011050944444608)
  testSlope(dataSeries, 8, 0.14677720944444594)
  testSlope(dataSeries, 7, 0.13344390944444584)
  testSlope(dataSeries, 6, 0.12011060944444577)
  testSlope(dataSeries, 5, 0.10677730944444566)
  testSlope(dataSeries, 4, 0.09344400944444556)
  testSlope(dataSeries, 3, 0.08011070944444545)
  testSlope(dataSeries, 2, 0.06677740944444538)
  testSlope(dataSeries, 1, 0.05344410944444526)
  testSlope(dataSeries, 0, 0.04011080944444517)
  dataSeries.push(0.19, 0.01406)
  testCoefficientA(dataSeries, 0.7)
  testCoefficientB(dataSeries, -0.07999932499999947)
  testSlope(dataSeries, 10, 0.1860006750000005)
  testSlope(dataSeries, 9, 0.17200067500000055)
  testSlope(dataSeries, 8, 0.15800067500000053)
  testSlope(dataSeries, 7, 0.14400067500000052)
  testSlope(dataSeries, 6, 0.1300006750000005)
  testSlope(dataSeries, 5, 0.11600067500000054)
  testSlope(dataSeries, 4, 0.10200067500000053)
  testSlope(dataSeries, 3, 0.08800067500000051)
  testSlope(dataSeries, 2, 0.07400067500000053)
  testSlope(dataSeries, 1, 0.06000067500000052)
  testSlope(dataSeries, 0, 0.04600067500000053)
  dataSeries.push(0.2, 0.016466667)
  testCoefficientA(dataSeries, 0.7666673611111072)
  testCoefficientB(dataSeries, -0.09444460833333299)
  testSlope(dataSeries, 10, 0.21222233611110994)
  testSlope(dataSeries, 9, 0.19688898888888776)
  testSlope(dataSeries, 8, 0.18155564166666563)
  testSlope(dataSeries, 7, 0.1662222944444435)
  testSlope(dataSeries, 6, 0.15088894722222132)
  testSlope(dataSeries, 5, 0.13555559999999917)
  testSlope(dataSeries, 4, 0.12022225277777707)
  testSlope(dataSeries, 3, 0.10488890555555491)
  testSlope(dataSeries, 2, 0.08955555833333273)
  testSlope(dataSeries, 1, 0.0742222111111106)
  testSlope(dataSeries, 0, 0.058888863888888476)
  dataSeries.push(0.21, 0.019133333)
  testCoefficientA(dataSeries, 0.8333338888888899)
  testCoefficientB(dataSeries, -0.11055569444444437)
  testSlope(dataSeries, 10, 0.2394445388888894)
  testSlope(dataSeries, 9, 0.22277786111111164)
  testSlope(dataSeries, 8, 0.20611118333333384)
  testSlope(dataSeries, 7, 0.18944450555555603)
  testSlope(dataSeries, 6, 0.17277782777777823)
  testSlope(dataSeries, 5, 0.15611115000000042)
  testSlope(dataSeries, 4, 0.13944447222222262)
  testSlope(dataSeries, 3, 0.12277779444444482)
  testSlope(dataSeries, 2, 0.10611111666666702)
  testSlope(dataSeries, 1, 0.08944443888888921)
  testSlope(dataSeries, 0, 0.07277776111111141)
  dataSeries.push(0.22, 0.022073333)
  testCoefficientA(dataSeries, 0.9000000000000012)
  testCoefficientB(dataSeries, -0.1285555666666672)
  testSlope(dataSeries, 10, 0.26744443333333334)
  testSlope(dataSeries, 9, 0.2494444333333333)
  testSlope(dataSeries, 8, 0.23144443333333334)
  testSlope(dataSeries, 7, 0.21344443333333327)
  testSlope(dataSeries, 6, 0.19544443333333325)
  testSlope(dataSeries, 5, 0.17744443333333323)
  testSlope(dataSeries, 4, 0.15944443333333322)
  testSlope(dataSeries, 3, 0.14144443333333315)
  testSlope(dataSeries, 2, 0.12344443333333319)
  testSlope(dataSeries, 1, 0.10544443333333312)
  testSlope(dataSeries, 0, 0.0874444333333331)
  dataSeries.push(0.23, 0.0253)
  testCoefficientA(dataSeries, 0.9666661111111128)
  testCoefficientB(dataSeries, -0.14788871666666734)
  testSlope(dataSeries, 10, 0.2967776944444446)
  testSlope(dataSeries, 9, 0.2774443722222223)
  testSlope(dataSeries, 8, 0.25811105)
  testSlope(dataSeries, 7, 0.2387777277777778)
  testSlope(dataSeries, 6, 0.21944440555555553)
  testSlope(dataSeries, 5, 0.20011108333333325)
  testSlope(dataSeries, 4, 0.18077776111111102)
  testSlope(dataSeries, 3, 0.16144443888888874)
  testSlope(dataSeries, 2, 0.1421111166666665)
  testSlope(dataSeries, 1, 0.12277779444444428)
  testSlope(dataSeries, 0, 0.103444472222222)
  dataSeries.push(0.24, 0.028826667)
  testCoefficientA(dataSeries, 1.033332777777779)
  testCoefficientB(dataSeries, -0.16855537222222172)
  testSlope(dataSeries, 10, 0.3274443611111122)
  testSlope(dataSeries, 9, 0.3067777055555566)
  testSlope(dataSeries, 8, 0.28611105000000103)
  testSlope(dataSeries, 7, 0.26544439444444545)
  testSlope(dataSeries, 6, 0.24477773888888987)
  testSlope(dataSeries, 5, 0.2241110833333343)
  testSlope(dataSeries, 4, 0.2034444277777787)
  testSlope(dataSeries, 3, 0.18277777222222313)
  testSlope(dataSeries, 2, 0.16211111666666755)
  testSlope(dataSeries, 1, 0.14144446111111197)
  testSlope(dataSeries, 0, 0.1207778055555564)
  dataSeries.push(0.25, 0.032666667)
  testCoefficientA(dataSeries, 1.10000055555556)
  testCoefficientB(dataSeries, -0.1905557388888898)
  testSlope(dataSeries, 10, 0.3594445388888903)
  testSlope(dataSeries, 9, 0.337444527777779)
  testSlope(dataSeries, 8, 0.31544451666666784)
  testSlope(dataSeries, 7, 0.2934445055555567)
  testSlope(dataSeries, 6, 0.2714444944444454)
  testSlope(dataSeries, 5, 0.24944448333333427)
  testSlope(dataSeries, 4, 0.22744447222222305)
  testSlope(dataSeries, 3, 0.20544446111111184)
  testSlope(dataSeries, 2, 0.18344445000000068)
  testSlope(dataSeries, 1, 0.16144443888888946)
  testSlope(dataSeries, 0, 0.13944442777777824)
  dataSeries.push(0.26, 0.036833333)
  testCoefficientA(dataSeries, 1.1666665999999992)
  testCoefficientB(dataSeries, -0.21388889999999924)
  testSlope(dataSeries, 10, 0.3927777320000003)
  testSlope(dataSeries, 9, 0.36944440000000034)
  testSlope(dataSeries, 8, 0.34611106800000035)
  testSlope(dataSeries, 7, 0.32277773600000037)
  testSlope(dataSeries, 6, 0.2994444040000004)
  testSlope(dataSeries, 5, 0.2761110720000004)
  testSlope(dataSeries, 4, 0.2527777400000004)
  testSlope(dataSeries, 3, 0.22944440800000046)
  testSlope(dataSeries, 2, 0.20611107600000048)
  testSlope(dataSeries, 1, 0.18277774400000055)
  testSlope(dataSeries, 0, 0.1594444120000005)
  dataSeries.push(0.27, 0.04134)
  testCoefficientA(dataSeries, 1.233333399999999)
  testCoefficientB(dataSeries, -0.23855556666666577)
  testSlope(dataSeries, 10, 0.4274444693333337)
  testSlope(dataSeries, 9, 0.40277780133333363)
  testSlope(dataSeries, 8, 0.3781111333333337)
  testSlope(dataSeries, 7, 0.35344446533333373)
  testSlope(dataSeries, 6, 0.3287777973333338)
  testSlope(dataSeries, 5, 0.30411112933333373)
  testSlope(dataSeries, 4, 0.2794444613333338)
  testSlope(dataSeries, 3, 0.25477779333333384)
  testSlope(dataSeries, 2, 0.23011112533333383)
  testSlope(dataSeries, 1, 0.20544445733333383)
  testSlope(dataSeries, 0, 0.18077778933333388)
  dataSeries.push(0.28, 0.0462)
  testCoefficientA(dataSeries, 1.2999994444444403)
  testCoefficientB(dataSeries, -0.26455532777777824)
  testSlope(dataSeries, 10, 0.4634443611111084)
  testSlope(dataSeries, 9, 0.43744437222221955)
  testSlope(dataSeries, 8, 0.4114443833333308)
  testSlope(dataSeries, 7, 0.3854443944444419)
  testSlope(dataSeries, 6, 0.359444405555553)
  testSlope(dataSeries, 5, 0.33344441666666436)
  testSlope(dataSeries, 4, 0.3074444277777755)
  testSlope(dataSeries, 3, 0.2814444388888867)
  testSlope(dataSeries, 2, 0.25544444999999794)
  testSlope(dataSeries, 1, 0.22944446111110905)
  testSlope(dataSeries, 0, 0.20344447222222023)
  dataSeries.push(0.29, 0.051426667)
  testCoefficientA(dataSeries, 1.3666672222222311)
  testCoefficientB(dataSeries, -0.2918891166666666)
  testSlope(dataSeries, 10, 0.5007778722222274)
  testSlope(dataSeries, 9, 0.4734445277777829)
  testSlope(dataSeries, 8, 0.4461111833333382)
  testSlope(dataSeries, 7, 0.41877783888889364)
  testSlope(dataSeries, 6, 0.39144449444444895)
  testSlope(dataSeries, 5, 0.36411115000000427)
  testSlope(dataSeries, 4, 0.3367778055555597)
  testSlope(dataSeries, 3, 0.3094444611111151)
  testSlope(dataSeries, 2, 0.28211111666667044)
  testSlope(dataSeries, 1, 0.25477777222222586)
  testSlope(dataSeries, 0, 0.22744442777778118)
  dataSeries.push(0.3, 0.057033333)
  testCoefficientA(dataSeries, 1.4333338888888956)
  testCoefficientB(dataSeries, -0.3205557944444456)
  testSlope(dataSeries, 10, 0.5394445388888918)
  testSlope(dataSeries, 9, 0.5107778611111138)
  testSlope(dataSeries, 8, 0.482111183333336)
  testSlope(dataSeries, 7, 0.45344450555555804)
  testSlope(dataSeries, 6, 0.42477782777778017)
  testSlope(dataSeries, 5, 0.3961111500000022)
  testSlope(dataSeries, 4, 0.3674444722222242)
  testSlope(dataSeries, 3, 0.33877779444444645)
  testSlope(dataSeries, 2, 0.31011111666666846)
  testSlope(dataSeries, 1, 0.2814444388888905)
  testSlope(dataSeries, 0, 0.2527777611111126)
  dataSeries.push(0.31, 0.063033333)
  testCoefficientA(dataSeries, 1.500000000000005)
  testCoefficientB(dataSeries, -0.35055556666666643)
  testSlope(dataSeries, 10, 0.5794444333333367)
  testSlope(dataSeries, 9, 0.5494444333333366)
  testSlope(dataSeries, 8, 0.5194444333333365)
  testSlope(dataSeries, 7, 0.48944443333333654)
  testSlope(dataSeries, 6, 0.4594444333333364)
  testSlope(dataSeries, 5, 0.42944443333333626)
  testSlope(dataSeries, 4, 0.3994444333333361)
  testSlope(dataSeries, 3, 0.369444433333336)
  testSlope(dataSeries, 2, 0.33944443333333596)
  testSlope(dataSeries, 1, 0.3094444333333358)
  testSlope(dataSeries, 0, 0.2794444333333357)
  dataSeries.push(0.32, 0.06944)
  testCoefficientA(dataSeries, 1.5666661111111233)
  testCoefficientB(dataSeries, -0.38188861666666574)
  testSlope(dataSeries, 10, 0.6207776944444532)
  testSlope(dataSeries, 9, 0.5894443722222307)
  testSlope(dataSeries, 8, 0.5581110500000082)
  testSlope(dataSeries, 7, 0.5267777277777858)
  testSlope(dataSeries, 6, 0.49544440555556335)
  testSlope(dataSeries, 5, 0.46411108333334095)
  testSlope(dataSeries, 4, 0.43277776111111843)
  testSlope(dataSeries, 3, 0.4014444388888959)
  testSlope(dataSeries, 2, 0.3701111166666734)
  testSlope(dataSeries, 1, 0.338777794444451)
  testSlope(dataSeries, 0, 0.3074444722222285)
  dataSeries.push(0.33, 0.076266667)
  testCoefficientA(dataSeries, 1.6333327777777635)
  testCoefficientB(dataSeries, -0.414555272222218)
  testSlope(dataSeries, 10, 0.6634443611111059)
  testSlope(dataSeries, 9, 0.6307777055555507)
  testSlope(dataSeries, 8, 0.5981110499999954)
  testSlope(dataSeries, 7, 0.5654443944444401)
  testSlope(dataSeries, 6, 0.5327777388888848)
  testSlope(dataSeries, 5, 0.5001110833333297)
  testSlope(dataSeries, 4, 0.4674444277777744)
  testSlope(dataSeries, 3, 0.434777772222219)
  testSlope(dataSeries, 2, 0.40211111666666377)
  testSlope(dataSeries, 1, 0.3694444611111085)
  testSlope(dataSeries, 0, 0.33677780555555326)
  dataSeries.push(0.34, 0.083526667)
  testCoefficientA(dataSeries, 1.700000555555579)
  testCoefficientB(dataSeries, -0.44855583888889444)
  testSlope(dataSeries, 10, 0.7074445388888995)
  testSlope(dataSeries, 9, 0.6734445277777878)
  testSlope(dataSeries, 8, 0.6394445166666762)
  testSlope(dataSeries, 7, 0.6054445055555646)
  testSlope(dataSeries, 6, 0.571444494444453)
  testSlope(dataSeries, 5, 0.5374444833333414)
  testSlope(dataSeries, 4, 0.50344447222223)
  testSlope(dataSeries, 3, 0.4694444611111183)
  testSlope(dataSeries, 2, 0.4354444500000067)
  testSlope(dataSeries, 1, 0.4014444388888951)
  testSlope(dataSeries, 0, 0.36744442777778347)
  dataSeries.push(0.35, 0.091233333)
  testCoefficientA(dataSeries, 1.7666666000000077)
  testCoefficientB(dataSeries, -0.48388889999999907)
  testSlope(dataSeries, 10, 0.7527777200000063)
  testSlope(dataSeries, 9, 0.7174443880000063)
  testSlope(dataSeries, 8, 0.6821110560000061)
  testSlope(dataSeries, 7, 0.6467777240000059)
  testSlope(dataSeries, 6, 0.6114443920000057)
  testSlope(dataSeries, 5, 0.5761110600000054)
  testSlope(dataSeries, 4, 0.5407777280000055)
  testSlope(dataSeries, 3, 0.5054443960000053)
  testSlope(dataSeries, 2, 0.47011106400000513)
  testSlope(dataSeries, 1, 0.434777732000005)
  testSlope(dataSeries, 0, 0.3994444000000048)
  dataSeries.push(0.36, 0.0994)
  testCoefficientA(dataSeries, 1.833333400000001)
  testCoefficientB(dataSeries, -0.5205555666666769)
  testSlope(dataSeries, 10, 0.7994444813333238)
  testSlope(dataSeries, 9, 0.7627778133333237)
  testSlope(dataSeries, 8, 0.7261111453333239)
  testSlope(dataSeries, 7, 0.6894444773333238)
  testSlope(dataSeries, 6, 0.6527778093333237)
  testSlope(dataSeries, 5, 0.6161111413333237)
  testSlope(dataSeries, 4, 0.5794444733333236)
  testSlope(dataSeries, 3, 0.5427778053333235)
  testSlope(dataSeries, 2, 0.5061111373333237)
  testSlope(dataSeries, 1, 0.46944446933332373)
  testSlope(dataSeries, 0, 0.43277780133332366)
  dataSeries.push(0.37, 0.10804)
  testCoefficientA(dataSeries, 1.8999994444444228)
  testCoefficientB(dataSeries, -0.5585552277777724)
  testSlope(dataSeries, 10, 0.8474443611111003)
  testSlope(dataSeries, 9, 0.8094443722222119)
  testSlope(dataSeries, 8, 0.7714443833333234)
  testSlope(dataSeries, 7, 0.7334443944444352)
  testSlope(dataSeries, 6, 0.6954444055555468)
  testSlope(dataSeries, 5, 0.6574444166666581)
  testSlope(dataSeries, 4, 0.6194444277777696)
  testSlope(dataSeries, 3, 0.5814444388888812)
  testSlope(dataSeries, 2, 0.5434444499999928)
  testSlope(dataSeries, 1, 0.5054444611111045)
  testSlope(dataSeries, 0, 0.46744447222221586)
  dataSeries.push(0.38, 0.117166667)
  testCoefficientA(dataSeries, 1.96666722222225)
  testCoefficientB(dataSeries, -0.5978892166666581)
  testSlope(dataSeries, 10, 0.8967778722222521)
  testSlope(dataSeries, 9, 0.8574445277778069)
  testSlope(dataSeries, 8, 0.8181111833333619)
  testSlope(dataSeries, 7, 0.7787778388889168)
  testSlope(dataSeries, 6, 0.739444494444472)
  testSlope(dataSeries, 5, 0.700111150000027)
  testSlope(dataSeries, 4, 0.660777805555582)
  testSlope(dataSeries, 3, 0.6214444611111369)
  testSlope(dataSeries, 2, 0.5821111166666919)
  testSlope(dataSeries, 1, 0.5427777722222469)
  testSlope(dataSeries, 0, 0.5034444277778021)
  dataSeries.push(0.39, 0.126793333)
  testCoefficientA(dataSeries, 2.033333888888858)
  testCoefficientB(dataSeries, -0.6385558944444392)
  testSlope(dataSeries, 10, 0.9474445388888701)
  testSlope(dataSeries, 9, 0.9067778611110928)
  testSlope(dataSeries, 8, 0.8661111833333157)
  testSlope(dataSeries, 7, 0.8254445055555384)
  testSlope(dataSeries, 6, 0.7847778277777613)
  testSlope(dataSeries, 5, 0.7441111499999844)
  testSlope(dataSeries, 4, 0.7034444722222071)
  testSlope(dataSeries, 3, 0.66277779444443)
  testSlope(dataSeries, 2, 0.6221111166666526)
  testSlope(dataSeries, 1, 0.5814444388888755)
  testSlope(dataSeries, 0, 0.5407777611110984)
  dataSeries.push(0.4, 0.136933333)
  testCoefficientA(dataSeries, 2.1)
  testCoefficientB(dataSeries, -0.6805555666666744)
  testSlope(dataSeries, 10, 0.9994444333333258)
  testSlope(dataSeries, 9, 0.9574444333333257)
  testSlope(dataSeries, 8, 0.9154444333333257)
  testSlope(dataSeries, 7, 0.8734444333333257)
  testSlope(dataSeries, 6, 0.8314444333333256)
  testSlope(dataSeries, 5, 0.7894444333333256)
  testSlope(dataSeries, 4, 0.7474444333333258)
  testSlope(dataSeries, 3, 0.7054444333333257)
  testSlope(dataSeries, 2, 0.6634444333333257)
  testSlope(dataSeries, 1, 0.6214444333333257)
  testSlope(dataSeries, 0, 0.5794444333333256)
  dataSeries.push(0.41, 0.1476)
  testCoefficientA(dataSeries, 2.1666661111111924)
  testCoefficientB(dataSeries, -0.7238885166666844)
  testSlope(dataSeries, 10, 1.0527776944444933)
  testSlope(dataSeries, 9, 1.0094443722222697)
  testSlope(dataSeries, 8, 0.9661110500000458)
  testSlope(dataSeries, 7, 0.922777727777822)
  testSlope(dataSeries, 6, 0.8794444055555979)
  testSlope(dataSeries, 5, 0.836111083333374)
  testSlope(dataSeries, 4, 0.7927777611111502)
  testSlope(dataSeries, 3, 0.7494444388889265)
  testSlope(dataSeries, 2, 0.7061111166667027)
  testSlope(dataSeries, 1, 0.6627777944444788)
  testSlope(dataSeries, 0, 0.619444472222255)
  dataSeries.push(0.42, 0.158806667)
  testCoefficientA(dataSeries, 2.2333327777778647)
  testCoefficientB(dataSeries, -0.7685551722222349)
  testSlope(dataSeries, 10, 1.1074443611111713)
  testSlope(dataSeries, 9, 1.062777705555614)
  testSlope(dataSeries, 8, 1.0181110500000567)
  testSlope(dataSeries, 7, 0.9734443944444996)
  testSlope(dataSeries, 6, 0.9287777388889423)
  testSlope(dataSeries, 5, 0.8841110833333848)
  testSlope(dataSeries, 4, 0.8394444277778276)
  testSlope(dataSeries, 3, 0.7947777722222703)
  testSlope(dataSeries, 2, 0.7501111166667133)
  testSlope(dataSeries, 1, 0.7054444611111558)
  testSlope(dataSeries, 0, 0.6607778055555985)
  dataSeries.push(0.43, 0.170566667)
  testCoefficientA(dataSeries, 2.3000005555555636)
  testCoefficientB(dataSeries, -0.8145559388888743)
  testSlope(dataSeries, 10, 1.1634445388889103)
  testSlope(dataSeries, 9, 1.117444527777799)
  testSlope(dataSeries, 8, 1.0714445166666877)
  testSlope(dataSeries, 7, 1.0254445055555765)
  testSlope(dataSeries, 6, 0.9794444944444654)
  testSlope(dataSeries, 5, 0.933444483333354)
  testSlope(dataSeries, 4, 0.8874444722222428)
  testSlope(dataSeries, 3, 0.8414444611111314)
  testSlope(dataSeries, 2, 0.7954444500000202)
  testSlope(dataSeries, 1, 0.749444438888909)
  testSlope(dataSeries, 0, 0.7034444277777978)
  dataSeries.push(0.44, 0.182893333)
  testCoefficientA(dataSeries, 2.366666600000006)
  testCoefficientB(dataSeries, -0.8618888999999877)
  testSlope(dataSeries, 10, 1.2207777080000173)
  testSlope(dataSeries, 9, 1.1734443760000173)
  testSlope(dataSeries, 8, 1.1261110440000173)
  testSlope(dataSeries, 7, 1.0787777120000173)
  testSlope(dataSeries, 6, 1.0314443800000173)
  testSlope(dataSeries, 5, 0.9841110480000171)
  testSlope(dataSeries, 4, 0.9367777160000169)
  testSlope(dataSeries, 3, 0.8894443840000167)
  testSlope(dataSeries, 2, 0.8421110520000165)
  testSlope(dataSeries, 1, 0.7947777200000165)
  testSlope(dataSeries, 0, 0.7474443880000164)
  dataSeries.push(0.45, 0.1958)
  testCoefficientA(dataSeries, 2.4333334000000164)
  testCoefficientB(dataSeries, -0.9105555666666416)
  testSlope(dataSeries, 10, 1.279444493333373)
  testSlope(dataSeries, 9, 1.230777825333373)
  testSlope(dataSeries, 8, 1.1821111573333725)
  testSlope(dataSeries, 7, 1.133444489333372)
  testSlope(dataSeries, 6, 1.0847778213333716)
  testSlope(dataSeries, 5, 1.0361111533333716)
  testSlope(dataSeries, 4, 0.9874444853333713)
  testSlope(dataSeries, 3, 0.938777817333371)
  testSlope(dataSeries, 2, 0.8901111493333704)
  testSlope(dataSeries, 1, 0.8414444813333701)
  testSlope(dataSeries, 0, 0.7927778133333698)
  dataSeries.push(0.46, 0.2093)
  testCoefficientA(dataSeries, 2.49999944444449)
  testCoefficientB(dataSeries, -0.9605551277778037)
  testSlope(dataSeries, 10, 1.339444361111127)
  testSlope(dataSeries, 9, 1.2894443722222375)
  testSlope(dataSeries, 8, 1.2394443833333475)
  testSlope(dataSeries, 7, 1.1894443944444575)
  testSlope(dataSeries, 6, 1.139444405555568)
  testSlope(dataSeries, 5, 1.089444416666678)
  testSlope(dataSeries, 4, 1.0394444277777883)
  testSlope(dataSeries, 3, 0.9894444388888985)
  testSlope(dataSeries, 2, 0.9394444500000088)
  testSlope(dataSeries, 1, 0.8894444611111187)
  testSlope(dataSeries, 0, 0.839444472222229)
  dataSeries.push(0.47, 0.223406667)
  testCoefficientA(dataSeries, 2.566667222222285)
  testCoefficientB(dataSeries, -1.0118893166666814)
  testSlope(dataSeries, 10, 1.4007778722222661)
  testSlope(dataSeries, 9, 1.3494445277778206)
  testSlope(dataSeries, 8, 1.2981111833333752)
  testSlope(dataSeries, 7, 1.2467778388889292)
  testSlope(dataSeries, 6, 1.1954444944444838)
  testSlope(dataSeries, 5, 1.1441111500000378)
  testSlope(dataSeries, 4, 1.092777805555592)
  testSlope(dataSeries, 3, 1.0414444611111464)
  testSlope(dataSeries, 2, 0.9901111166667009)
  testSlope(dataSeries, 1, 0.9387777722222552)
  testSlope(dataSeries, 0, 0.8874444277778093)
  dataSeries.push(0.48, 0.238133333)
  testCoefficientA(dataSeries, 2.6333338888888447)
  testCoefficientB(dataSeries, -1.064555994444511)
  testSlope(dataSeries, 10, 1.4634445388887798)
  testSlope(dataSeries, 9, 1.410777861111003)
  testSlope(dataSeries, 8, 1.358111183333226)
  testSlope(dataSeries, 7, 1.305444505555449)
  testSlope(dataSeries, 6, 1.2527778277776722)
  testSlope(dataSeries, 5, 1.2001111499998953)
  testSlope(dataSeries, 4, 1.1474444722221184)
  testSlope(dataSeries, 3, 1.0947777944443415)
  testSlope(dataSeries, 2, 1.0421111166665646)
  testSlope(dataSeries, 1, 0.9894444388887877)
  testSlope(dataSeries, 0, 0.9367777611110109)
  dataSeries.push(0.49, 0.253493333)
  testCoefficientA(dataSeries, 2.700000000000124)
  testCoefficientB(dataSeries, -1.11855556666664)
  testSlope(dataSeries, 10, 1.5274444333334816)
  testSlope(dataSeries, 9, 1.473444433333479)
  testSlope(dataSeries, 8, 1.4194444333334766)
  testSlope(dataSeries, 7, 1.365444433333474)
  testSlope(dataSeries, 6, 1.3114444333334716)
  testSlope(dataSeries, 5, 1.2574444333334691)
  testSlope(dataSeries, 4, 1.2034444333334666)
  testSlope(dataSeries, 3, 1.1494444333334641)
  testSlope(dataSeries, 2, 1.0954444333334616)
  testSlope(dataSeries, 1, 1.0414444333334592)
  testSlope(dataSeries, 0, 0.9874444333334567)
  dataSeries.push(0.5, 0.2695)
  testCoefficientA(dataSeries, 2.766666111111115)
  testCoefficientB(dataSeries, -1.173888416666608)
  testSlope(dataSeries, 10, 1.592777694444507)
  testSlope(dataSeries, 9, 1.5374443722222846)
  testSlope(dataSeries, 8, 1.4821110500000623)
  testSlope(dataSeries, 7, 1.42677772777784)
  testSlope(dataSeries, 6, 1.3714444055556176)
  testSlope(dataSeries, 5, 1.3161110833333953)
  testSlope(dataSeries, 4, 1.260777761111173)
  testSlope(dataSeries, 3, 1.2054444388889507)
  testSlope(dataSeries, 2, 1.1501111166667284)
  testSlope(dataSeries, 1, 1.094777794444506)
  testSlope(dataSeries, 0, 1.0394444722222842)
  dataSeries.push(0.51, 0.286166667)
  testCoefficientA(dataSeries, 2.833332777777739)
  testCoefficientB(dataSeries, -1.230555072222179)
  testSlope(dataSeries, 10, 1.6594443611111147)
  testSlope(dataSeries, 9, 1.60277770555556)
  testSlope(dataSeries, 8, 1.5461110500000055)
  testSlope(dataSeries, 7, 1.4894443944444504)
  testSlope(dataSeries, 6, 1.4327777388888958)
  testSlope(dataSeries, 5, 1.3761110833333412)
  testSlope(dataSeries, 4, 1.3194444277777861)
  testSlope(dataSeries, 3, 1.2627777722222315)
  testSlope(dataSeries, 2, 1.2061111166666765)
  testSlope(dataSeries, 1, 1.1494444611111219)
  testSlope(dataSeries, 0, 1.0927778055555668)
  dataSeries.push(0.52, 0.303506667)
  testCoefficientA(dataSeries, 2.900000555555566)
  testCoefficientB(dataSeries, -1.2885560388889228)
  testSlope(dataSeries, 10, 1.727444538888866)
  testSlope(dataSeries, 9, 1.6694445277777545)
  testSlope(dataSeries, 8, 1.6114445166666431)
  testSlope(dataSeries, 7, 1.5534445055555317)
  testSlope(dataSeries, 6, 1.4954444944444203)
  testSlope(dataSeries, 5, 1.4374444833333089)
  testSlope(dataSeries, 4, 1.379444472222198)
  testSlope(dataSeries, 3, 1.3214444611110865)
  testSlope(dataSeries, 2, 1.263444449999975)
  testSlope(dataSeries, 1, 1.2054444388888637)
  testSlope(dataSeries, 0, 1.1474444277777527)
  dataSeries.push(0.53, 0.321533333)
  testCoefficientA(dataSeries, 2.9666666000000026)
  testCoefficientB(dataSeries, -1.3478889000000505)
  testSlope(dataSeries, 10, 1.7967776959999526)
  testSlope(dataSeries, 9, 1.7374443639999522)
  testSlope(dataSeries, 8, 1.6781110319999522)
  testSlope(dataSeries, 7, 1.6187776999999521)
  testSlope(dataSeries, 6, 1.5594443679999521)
  testSlope(dataSeries, 5, 1.500111035999952)
  testSlope(dataSeries, 4, 1.4407777039999516)
  testSlope(dataSeries, 3, 1.381444371999952)
  testSlope(dataSeries, 2, 1.322111039999952)
  testSlope(dataSeries, 1, 1.262777707999952)
  testSlope(dataSeries, 0, 1.2034443759999516)
  dataSeries.push(0.54, 0.34026)
  testCoefficientA(dataSeries, 3.033333400000001)
  testCoefficientB(dataSeries, -1.4085555666667167)
  testSlope(dataSeries, 10, 1.8674445053332847)
  testSlope(dataSeries, 9, 1.8067778373332846)
  testSlope(dataSeries, 8, 1.7461111693332845)
  testSlope(dataSeries, 7, 1.6854445013332844)
  testSlope(dataSeries, 6, 1.6247778333332843)
  testSlope(dataSeries, 5, 1.5641111653332842)
  testSlope(dataSeries, 4, 1.5034444973332841)
  testSlope(dataSeries, 3, 1.442777829333284)
  testSlope(dataSeries, 2, 1.3821111613332844)
  testSlope(dataSeries, 1, 1.3214444933332843)
  testSlope(dataSeries, 0, 1.2607778253332842)
  dataSeries.push(0.55, 0.3597)
  testCoefficientA(dataSeries, 3.099999444444396)
  testCoefficientB(dataSeries, -1.4705550277777968)
  testSlope(dataSeries, 10, 1.939444361111039)
  testSlope(dataSeries, 9, 1.8774443722221512)
  testSlope(dataSeries, 8, 1.815444383333263)
  testSlope(dataSeries, 7, 1.7534443944443752)
  testSlope(dataSeries, 6, 1.691444405555487)
  testSlope(dataSeries, 5, 1.6294444166665991)
  testSlope(dataSeries, 4, 1.5674444277777113)
  testSlope(dataSeries, 3, 1.505444438888823)
  testSlope(dataSeries, 2, 1.4434444499999353)
  testSlope(dataSeries, 1, 1.3814444611110475)
  testSlope(dataSeries, 0, 1.3194444722221597)
  dataSeries.push(0.56, 0.379866667)
  testCoefficientA(dataSeries, 3.1666672222223515)
  testCoefficientB(dataSeries, -1.5338894166666346)
  testSlope(dataSeries, 10, 2.0127778722224)
  testSlope(dataSeries, 9, 1.9494445277779524)
  testSlope(dataSeries, 8, 1.8861111833335051)
  testSlope(dataSeries, 7, 1.8227778388890583)
  testSlope(dataSeries, 6, 1.759444494444611)
  testSlope(dataSeries, 5, 1.6961111500001642)
  testSlope(dataSeries, 4, 1.632777805555717)
  testSlope(dataSeries, 3, 1.5694444611112697)
  testSlope(dataSeries, 2, 1.5061111166668228)
  testSlope(dataSeries, 1, 1.4427777722223756)
  testSlope(dataSeries, 0, 1.3794444277779287)
  dataSeries.push(0.57, 0.400773333)
  testCoefficientA(dataSeries, 3.2333338888888794)
  testCoefficientB(dataSeries, -1.5985560944444122)
  testSlope(dataSeries, 10, 2.08744453888891)
  testSlope(dataSeries, 9, 2.022777861111133)
  testSlope(dataSeries, 8, 1.9581111833333553)
  testSlope(dataSeries, 7, 1.893444505555578)
  testSlope(dataSeries, 6, 1.8287778277778002)
  testSlope(dataSeries, 5, 1.7641111500000224)
  testSlope(dataSeries, 4, 1.699444472222245)
  testSlope(dataSeries, 3, 1.6347777944444672)
  testSlope(dataSeries, 2, 1.5701111166666895)
  testSlope(dataSeries, 1, 1.505444438888912)
  testSlope(dataSeries, 0, 1.4407777611111343)
  dataSeries.push(0.58, 0.422433333)
  testCoefficientA(dataSeries, 3.2999999999999248)
  testCoefficientB(dataSeries, -1.6645555666665988)
  testSlope(dataSeries, 10, 2.1634444333333134)
  testSlope(dataSeries, 9, 2.0974444333333153)
  testSlope(dataSeries, 8, 2.0314444333333173)
  testSlope(dataSeries, 7, 1.965444433333319)
  testSlope(dataSeries, 6, 1.89944443333332)
  testSlope(dataSeries, 5, 1.8334444333333215)
  testSlope(dataSeries, 4, 1.767444433333323)
  testSlope(dataSeries, 3, 1.7014444333333245)
  testSlope(dataSeries, 2, 1.635444433333326)
  testSlope(dataSeries, 1, 1.5694444333333275)
  testSlope(dataSeries, 0, 1.503444433333329)
  dataSeries.push(0.59, 0.44486)
  testCoefficientA(dataSeries, 3.366666111110915)
  testCoefficientB(dataSeries, -1.7318883166666772)
  testSlope(dataSeries, 10, 2.240777694444202)
  testSlope(dataSeries, 9, 2.173444372221984)
  testSlope(dataSeries, 8, 2.1061110499997655)
  testSlope(dataSeries, 7, 2.038777727777548)
  testSlope(dataSeries, 6, 1.9714444055553295)
  testSlope(dataSeries, 5, 1.9041110833331112)
  testSlope(dataSeries, 4, 1.8367777611108929)
  testSlope(dataSeries, 3, 1.7694444388886745)
  testSlope(dataSeries, 2, 1.7021111166664562)
  testSlope(dataSeries, 1, 1.6347777944442379)
  testSlope(dataSeries, 0, 1.5674444722220195)
  dataSeries.push(0.6, 0.468066667)
  testCoefficientA(dataSeries, 3.4333327777777636)
  testCoefficientB(dataSeries, -1.8005549722222762)
  testSlope(dataSeries, 10, 2.3194443611110405)
  testSlope(dataSeries, 9, 2.2507777055554845)
  testSlope(dataSeries, 8, 2.1821110499999294)
  testSlope(dataSeries, 7, 2.1134443944443735)
  testSlope(dataSeries, 6, 2.0447777388888193)
  testSlope(dataSeries, 5, 1.976111083333264)
  testSlope(dataSeries, 4, 1.9074444277777085)
  testSlope(dataSeries, 3, 1.8387777722221534)
  testSlope(dataSeries, 2, 1.770111116666598)
  testSlope(dataSeries, 1, 1.7014444611110429)
  testSlope(dataSeries, 0, 1.6327778055554873)
  dataSeries.push(0.61, 0.492066667)
  testCoefficientA(dataSeries, 3.5000005555560083)
  testCoefficientB(dataSeries, -1.8705561388889318)
  testSlope(dataSeries, 10, 2.399444538889398)
  testSlope(dataSeries, 9, 2.3294445277782776)
  testSlope(dataSeries, 8, 2.2594445166671573)
  testSlope(dataSeries, 7, 2.189444505556037)
  testSlope(dataSeries, 6, 2.1194444944449176)
  testSlope(dataSeries, 5, 2.049444483333798)
  testSlope(dataSeries, 4, 1.9794444722226776)
  testSlope(dataSeries, 3, 1.9094444611115573)
  testSlope(dataSeries, 2, 1.839444450000437)
  testSlope(dataSeries, 1, 1.7694444388893171)
  testSlope(dataSeries, 0, 1.6994444277781968)
  dataSeries.push(0.62, 0.516873333)
  testCoefficientA(dataSeries, 3.5666665999999925)
  testCoefficientB(dataSeries, -1.9418889000000683)
  testSlope(dataSeries, 10, 2.4807776839999227)
  testSlope(dataSeries, 9, 2.4094443519999227)
  testSlope(dataSeries, 8, 2.3381110199999227)
  testSlope(dataSeries, 7, 2.2667776879999226)
  testSlope(dataSeries, 6, 2.1954443559999226)
  testSlope(dataSeries, 5, 2.1241110239999226)
  testSlope(dataSeries, 4, 2.0527776919999234)
  testSlope(dataSeries, 3, 1.9814443599999239)
  testSlope(dataSeries, 2, 1.9101110279999238)
  testSlope(dataSeries, 1, 1.8387776959999238)
  testSlope(dataSeries, 0, 1.7674443639999238)
  dataSeries.push(0.63, 0.5425)
  testCoefficientA(dataSeries, 3.6333333999999406)
  testCoefficientB(dataSeries, -2.014555566666779)
  testSlope(dataSeries, 10, 2.5634445173331466)
  testSlope(dataSeries, 9, 2.4907778493331474)
  testSlope(dataSeries, 8, 2.418111181333148)
  testSlope(dataSeries, 7, 2.34544451333315)
  testSlope(dataSeries, 6, 2.2727778453331506)
  testSlope(dataSeries, 5, 2.2001111773331523)
  testSlope(dataSeries, 4, 2.127444509333153)
  testSlope(dataSeries, 3, 2.0547778413331548)
  testSlope(dataSeries, 2, 1.982111173333156)
  testSlope(dataSeries, 1, 1.9094445053331572)
  testSlope(dataSeries, 0, 1.8367778373331585)
  dataSeries.push(0.64, 0.56896)
  testCoefficientA(dataSeries, 3.6999994444441513)
  testCoefficientB(dataSeries, -2.088554927777809)
  testSlope(dataSeries, 10, 2.6474443611107046)
  testSlope(dataSeries, 9, 2.573444372221821)
  testSlope(dataSeries, 8, 2.4994443833329387)
  testSlope(dataSeries, 7, 2.4254443944440554)
  testSlope(dataSeries, 6, 2.351444405555172)
  testSlope(dataSeries, 5, 2.2774444166662895)
  testSlope(dataSeries, 4, 2.203444427777406)
  testSlope(dataSeries, 3, 2.1294444388885228)
  testSlope(dataSeries, 2, 2.055444449999641)
  testSlope(dataSeries, 1, 1.9814444611107578)
  testSlope(dataSeries, 0, 1.9074444722218744)
  dataSeries.push(0.65, 0.596266667)
  testCoefficientA(dataSeries, 3.7666672222225253)
  testCoefficientB(dataSeries, -2.163889516666527)
  testSlope(dataSeries, 10, 2.7327778722227563)
  testSlope(dataSeries, 9, 2.657444527778305)
  testSlope(dataSeries, 8, 2.5821111833338546)
  testSlope(dataSeries, 7, 2.506777838889404)
  testSlope(dataSeries, 6, 2.431444494444954)
  testSlope(dataSeries, 5, 2.3561111500005034)
  testSlope(dataSeries, 4, 2.280777805556052)
  testSlope(dataSeries, 3, 2.2054444611116018)
  testSlope(dataSeries, 2, 2.1301111166671514)
  testSlope(dataSeries, 1, 2.054777772222702)
  testSlope(dataSeries, 0, 1.9794444277782515)
  dataSeries.push(0.66, 0.624433333)
  testCoefficientA(dataSeries, 3.8333338888887964)
  testCoefficientB(dataSeries, -2.2405561944443493)
  testSlope(dataSeries, 10, 2.8194445388888623)
  testSlope(dataSeries, 9, 2.7427778611110867)
  testSlope(dataSeries, 8, 2.66611118333331)
  testSlope(dataSeries, 7, 2.5894445055555346)
  testSlope(dataSeries, 6, 2.512777827777758)
  testSlope(dataSeries, 5, 2.4361111499999826)
  testSlope(dataSeries, 4, 2.359444472222206)
  testSlope(dataSeries, 3, 2.2827777944444305)
  testSlope(dataSeries, 2, 2.206111116666654)
  testSlope(dataSeries, 1, 2.1294444388888785)
  testSlope(dataSeries, 0, 2.052777761111103)
  dataSeries.push(0.67, 0.653473333)
  testCoefficientA(dataSeries, 3.9000000000000172)
  testCoefficientB(dataSeries, -2.3185555666666193)
  testSlope(dataSeries, 10, 2.9074444333334037)
  testSlope(dataSeries, 9, 2.8294444333334035)
  testSlope(dataSeries, 8, 2.751444433333403)
  testSlope(dataSeries, 7, 2.673444433333403)
  testSlope(dataSeries, 6, 2.5954444333334026)
  testSlope(dataSeries, 5, 2.5174444333334023)
  testSlope(dataSeries, 4, 2.439444433333402)
  testSlope(dataSeries, 3, 2.361444433333401)
  testSlope(dataSeries, 2, 2.2834444333334005)
  testSlope(dataSeries, 1, 2.2054444333334002)
  testSlope(dataSeries, 0, 2.1274444333334)
  dataSeries.push(0.68, 0.6834)
  testCoefficientA(dataSeries, 3.9666661111107553)
  testCoefficientB(dataSeries, -2.397888216666667)
  testSlope(dataSeries, 10, 2.996777694443961)
  testSlope(dataSeries, 9, 2.9174443722217456)
  testSlope(dataSeries, 8, 2.8381110499995303)
  testSlope(dataSeries, 7, 2.758777727777315)
  testSlope(dataSeries, 6, 2.6794444055551)
  testSlope(dataSeries, 5, 2.6001110833328847)
  testSlope(dataSeries, 4, 2.5207777611106694)
  testSlope(dataSeries, 3, 2.441444438888454)
  testSlope(dataSeries, 2, 2.362111116666239)
  testSlope(dataSeries, 1, 2.2827777944440237)
  testSlope(dataSeries, 0, 2.2034444722218094)
  dataSeries.push(0.69, 0.714226667)
  testCoefficientA(dataSeries, 4.0333327777777965)
  testCoefficientB(dataSeries, -2.478554872222182)
  testSlope(dataSeries, 10, 3.0874443611111766)
  testSlope(dataSeries, 9, 3.006777705555622)
  testSlope(dataSeries, 8, 2.9261110500000655)
  testSlope(dataSeries, 7, 2.84544439444451)
  testSlope(dataSeries, 6, 2.7647777388889536)
  testSlope(dataSeries, 5, 2.684111083333398)
  testSlope(dataSeries, 4, 2.6034444277778417)
  testSlope(dataSeries, 3, 2.5227777722222853)
  testSlope(dataSeries, 2, 2.4421111166667298)
  testSlope(dataSeries, 1, 2.3614444611111733)
  testSlope(dataSeries, 0, 2.280777805555618)
  dataSeries.push(0.7, 0.745966667)
  testCoefficientA(dataSeries, 4.100000555555784)
  testCoefficientB(dataSeries, -2.5605562388888137)
  testSlope(dataSeries, 10, 3.1794445388892836)
  testSlope(dataSeries, 9, 3.097444527778168)
  testSlope(dataSeries, 8, 3.0154445166670527)
  testSlope(dataSeries, 7, 2.9334445055559373)
  testSlope(dataSeries, 6, 2.851444494444822)
  testSlope(dataSeries, 5, 2.7694444833337055)
  testSlope(dataSeries, 4, 2.68744447222259)
  testSlope(dataSeries, 3, 2.6054444611114747)
  testSlope(dataSeries, 2, 2.5234444500003583)
  testSlope(dataSeries, 1, 2.441444438889243)
  testSlope(dataSeries, 0, 2.3594444277781275)
  dataSeries.push(0.71, 0.778633333)
  testCoefficientA(dataSeries, 4.166666599999969)
  testCoefficientB(dataSeries, -2.6438888999999857)
  testSlope(dataSeries, 10, 3.2727776719999704)
  testSlope(dataSeries, 9, 3.189444339999971)
  testSlope(dataSeries, 8, 3.106111007999971)
  testSlope(dataSeries, 7, 3.0227776759999725)
  testSlope(dataSeries, 6, 2.939444343999973)
  testSlope(dataSeries, 5, 2.8561110119999733)
  testSlope(dataSeries, 4, 2.7727776799999746)
  testSlope(dataSeries, 3, 2.689444347999975)
  testSlope(dataSeries, 2, 2.6061110159999754)
  testSlope(dataSeries, 1, 2.522777683999976)
  testSlope(dataSeries, 0, 2.4394443519999762)
  dataSeries.push(0.72, 0.81224)
  testCoefficientA(dataSeries, 4.233333399999986)
  testCoefficientB(dataSeries, -2.7285555666666763)
  testSlope(dataSeries, 10, 3.3674445293333033)
  testSlope(dataSeries, 9, 3.2827778613333036)
  testSlope(dataSeries, 8, 3.198111193333304)
  testSlope(dataSeries, 7, 3.1134445253333043)
  testSlope(dataSeries, 6, 3.0287778573333055)
  testSlope(dataSeries, 5, 2.944111189333305)
  testSlope(dataSeries, 4, 2.8594445213333053)
  testSlope(dataSeries, 3, 2.7747778533333056)
  testSlope(dataSeries, 2, 2.690111185333306)
  testSlope(dataSeries, 1, 2.6054445173333063)
  testSlope(dataSeries, 0, 2.5207778493333066)
  dataSeries.push(0.73, 0.8468)
  testCoefficientA(dataSeries, 4.2999994444436505)
  testCoefficientB(dataSeries, -2.8145548277778807)
  testSlope(dataSeries, 10, 3.463444361109849)
  testSlope(dataSeries, 9, 3.377444372220976)
  testSlope(dataSeries, 8, 3.2914443833321028)
  testSlope(dataSeries, 7, 3.2054443944432296)
  testSlope(dataSeries, 6, 3.1194444055543564)
  testSlope(dataSeries, 5, 3.033444416665484)
  testSlope(dataSeries, 4, 2.947444427776611)
  testSlope(dataSeries, 3, 2.861444438887738)
  testSlope(dataSeries, 2, 2.7754444499988655)
  testSlope(dataSeries, 1, 2.6894444611099924)
  testSlope(dataSeries, 0, 2.603444472221119)
  dataSeries.push(0.74, 0.882326667)
  testCoefficientA(dataSeries, 4.366667222222433)
  testCoefficientB(dataSeries, -2.9018896166667187)
  testSlope(dataSeries, 10, 3.560777872222482)
  testSlope(dataSeries, 9, 3.473444527778033)
  testSlope(dataSeries, 8, 3.386111183333585)
  testSlope(dataSeries, 7, 3.298777838889136)
  testSlope(dataSeries, 6, 3.2114444944446867)
  testSlope(dataSeries, 5, 3.1241111500002385)
  testSlope(dataSeries, 4, 3.0367778055557904)
  testSlope(dataSeries, 3, 2.949444461111342)
  testSlope(dataSeries, 2, 2.862111116666893)
  testSlope(dataSeries, 1, 2.774777772222444)
  testSlope(dataSeries, 0, 2.687444427777996)
  dataSeries.push(0.75, 0.918833333)
  testCoefficientA(dataSeries, 4.433333888889346)
  testCoefficientB(dataSeries, -2.9905562944447137)
  testSlope(dataSeries, 10, 3.6594445388893053)
  testSlope(dataSeries, 9, 3.5707778611115186)
  testSlope(dataSeries, 8, 3.482111183333732)
  testSlope(dataSeries, 7, 3.3934445055559443)
  testSlope(dataSeries, 6, 3.3047778277781577)
  testSlope(dataSeries, 5, 3.216111150000371)
  testSlope(dataSeries, 4, 3.1274444722225834)
  testSlope(dataSeries, 3, 3.0387777944447976)
  testSlope(dataSeries, 2, 2.950111116667011)
  testSlope(dataSeries, 1, 2.8614444388892233)
  testSlope(dataSeries, 0, 2.7727777611114366)
  dataSeries.push(0.76, 0.956333333)
  testCoefficientA(dataSeries, 4.500000000000062)
  testCoefficientB(dataSeries, -3.0805555666668374)
  testSlope(dataSeries, 10, 3.7594444333332575)
  testSlope(dataSeries, 9, 3.669444433333256)
  testSlope(dataSeries, 8, 3.5794444333332542)
  testSlope(dataSeries, 7, 3.4894444333332535)
  testSlope(dataSeries, 6, 3.399444433333252)
  testSlope(dataSeries, 5, 3.3094444333332502)
  testSlope(dataSeries, 4, 3.2194444333332495)
  testSlope(dataSeries, 3, 3.129444433333248)
  testSlope(dataSeries, 2, 3.039444433333248)
  testSlope(dataSeries, 1, 2.9494444333332464)
  testSlope(dataSeries, 0, 2.8594444333332447)
  dataSeries.push(0.77, 0.99484)
  testCoefficientA(dataSeries, 4.566666111109272)
  testCoefficientB(dataSeries, -3.1718881166664956)
  testSlope(dataSeries, 10, 3.8607776944417833)
  testSlope(dataSeries, 9, 3.769444372219598)
  testSlope(dataSeries, 8, 3.6781110499974123)
  testSlope(dataSeries, 7, 3.586777727775226)
  testSlope(dataSeries, 6, 3.4954444055530405)
  testSlope(dataSeries, 5, 3.404111083330855)
  testSlope(dataSeries, 4, 3.3127777611086695)
  testSlope(dataSeries, 3, 3.221444438886484)
  testSlope(dataSeries, 2, 3.1301111166642985)
  testSlope(dataSeries, 1, 3.038777794442114)
  testSlope(dataSeries, 0, 2.9474444722199284)
  dataSeries.push(0.78, 1.034366667)
  testCoefficientA(dataSeries, 4.633332777777342)
  testCoefficientB(dataSeries, -3.264554772221863)
  testSlope(dataSeries, 10, 3.963444361110791)
  testSlope(dataSeries, 9, 3.870777705555245)
  testSlope(dataSeries, 8, 3.7781110499996977)
  testSlope(dataSeries, 7, 3.6854443944441506)
  testSlope(dataSeries, 6, 3.5927777388886035)
  testSlope(dataSeries, 5, 3.5001110833330564)
  testSlope(dataSeries, 4, 3.40744442777751)
  testSlope(dataSeries, 3, 3.314777772221963)
  testSlope(dataSeries, 2, 3.222111116666416)
  testSlope(dataSeries, 1, 3.129444461110869)
  testSlope(dataSeries, 0, 3.0367778055553227)
  dataSeries.push(0.79, 1.074926667)
  testCoefficientA(dataSeries, 4.700000555556101)
  testCoefficientB(dataSeries, -3.3585563388887922)
  testSlope(dataSeries, 10, 4.067444538889847)
  testSlope(dataSeries, 9, 3.973444527778725)
  testSlope(dataSeries, 8, 3.879444516667603)
  testSlope(dataSeries, 7, 3.7854445055564807)
  testSlope(dataSeries, 6, 3.6914444944453586)
  testSlope(dataSeries, 5, 3.5974444833342374)
  testSlope(dataSeries, 4, 3.5034444722231153)
  testSlope(dataSeries, 3, 3.409444461111993)
  testSlope(dataSeries, 2, 3.315444450000871)
  testSlope(dataSeries, 1, 3.221444438889749)
  testSlope(dataSeries, 0, 3.127444427778627)
  dataSeries.push(0.8, 1.116533333)
  testCoefficientA(dataSeries, 4.766666599999916)
  testCoefficientB(dataSeries, -3.4538889000002486)
  testSlope(dataSeries, 10, 4.172777659999618)
  testSlope(dataSeries, 9, 4.077444327999619)
  testSlope(dataSeries, 8, 3.982110995999621)
  testSlope(dataSeries, 7, 3.8867776639996228)
  testSlope(dataSeries, 6, 3.7914443319996245)
  testSlope(dataSeries, 5, 3.6961109999996262)
  testSlope(dataSeries, 4, 3.600777667999627)
  testSlope(dataSeries, 3, 3.505444335999629)
  testSlope(dataSeries, 2, 3.4101110039996305)
  testSlope(dataSeries, 1, 3.3147776719996322)
  testSlope(dataSeries, 0, 3.219444339999634)
  dataSeries.push(0.81, 1.1592)
  testCoefficientA(dataSeries, 4.83333339999992)
  testCoefficientB(dataSeries, -3.550555566666534)
  testSlope(dataSeries, 10, 4.279444541333337)
  testSlope(dataSeries, 9, 4.182777873333338)
  testSlope(dataSeries, 8, 4.08611120533334)
  testSlope(dataSeries, 7, 3.9894445373333416)
  testSlope(dataSeries, 6, 3.8927778693333432)
  testSlope(dataSeries, 5, 3.796111201333345)
  testSlope(dataSeries, 4, 3.6994445333333466)
  testSlope(dataSeries, 3, 3.6027778653333473)
  testSlope(dataSeries, 2, 3.506111197333349)
  testSlope(dataSeries, 1, 3.4094445293333506)
  testSlope(dataSeries, 0, 3.3127778613333523)
  dataSeries.push(0.82, 1.20294)
  testCoefficientA(dataSeries, 4.899999444445996)
  testCoefficientB(dataSeries, -3.6485547277777206)
  testSlope(dataSeries, 10, 4.387444361113713)
  testSlope(dataSeries, 9, 4.289444372224793)
  testSlope(dataSeries, 8, 4.191444383335873)
  testSlope(dataSeries, 7, 4.093444394446953)
  testSlope(dataSeries, 6, 3.9954444055580334)
  testSlope(dataSeries, 5, 3.8974444166691127)
  testSlope(dataSeries, 4, 3.799444427780193)
  testSlope(dataSeries, 3, 3.701444438891273)
  testSlope(dataSeries, 2, 3.6034444500023532)
  testSlope(dataSeries, 1, 3.5054444611134334)
  testSlope(dataSeries, 0, 3.4074444722245127)
  dataSeries.push(0.83, 1.247766667)
  testCoefficientA(dataSeries, 4.9666672222224415)
  testCoefficientB(dataSeries, -3.7478897166665184)
  testSlope(dataSeries, 10, 4.496777872222733)
  testSlope(dataSeries, 9, 4.397444527778285)
  testSlope(dataSeries, 8, 4.2981111833338375)
  testSlope(dataSeries, 7, 4.198777838889388)
  testSlope(dataSeries, 6, 4.09944449444494)
  testSlope(dataSeries, 5, 4.000111150000491)
  testSlope(dataSeries, 4, 3.9007778055560416)
  testSlope(dataSeries, 3, 3.801444461111593)
  testSlope(dataSeries, 2, 3.7021111166671443)
  testSlope(dataSeries, 1, 3.602777772222695)
  testSlope(dataSeries, 0, 3.503444427778246)
  dataSeries.push(0.84, 1.293693333)
  testCoefficientA(dataSeries, 5.033333888888969)
  testCoefficientB(dataSeries, -3.8485563944443646)
  testSlope(dataSeries, 10, 4.607444538889104)
  testSlope(dataSeries, 9, 4.506777861111325)
  testSlope(dataSeries, 8, 4.406111183333544)
  testSlope(dataSeries, 7, 4.305444505555767)
  testSlope(dataSeries, 6, 4.2047778277779875)
  testSlope(dataSeries, 5, 4.104111150000207)
  testSlope(dataSeries, 4, 4.003444472222428)
  testSlope(dataSeries, 3, 3.9027777944446482)
  testSlope(dataSeries, 2, 3.802111116666869)
  testSlope(dataSeries, 1, 3.70144443888909)
  testSlope(dataSeries, 0, 3.60077776111131)
  dataSeries.push(0.85, 1.340733333)
  testCoefficientA(dataSeries, 5.100000000000273)
  testCoefficientB(dataSeries, -3.9505555666664702)
  testSlope(dataSeries, 10, 4.719444433333994)
  testSlope(dataSeries, 9, 4.617444433333988)
  testSlope(dataSeries, 8, 4.5154444333339825)
  testSlope(dataSeries, 7, 4.413444433333979)
  testSlope(dataSeries, 6, 4.311444433333973)
  testSlope(dataSeries, 5, 4.209444433333967)
  testSlope(dataSeries, 4, 4.107444433333962)
  testSlope(dataSeries, 3, 4.005444433333956)
  testSlope(dataSeries, 2, 3.903444433333951)
  testSlope(dataSeries, 1, 3.801444433333945)
  testSlope(dataSeries, 0, 3.6994444333339396)
  dataSeries.push(0.86, 1.3889)
  testCoefficientA(dataSeries, 5.166666111112106)
  testCoefficientB(dataSeries, -4.053888016666367)
  testSlope(dataSeries, 10, 4.832777694446456)
  testSlope(dataSeries, 9, 4.729444372224213)
  testSlope(dataSeries, 8, 4.626111050001972)
  testSlope(dataSeries, 7, 4.522777727779729)
  testSlope(dataSeries, 6, 4.419444405557487)
  testSlope(dataSeries, 5, 4.316111083335246)
  testSlope(dataSeries, 4, 4.212777761113005)
  testSlope(dataSeries, 3, 4.109444438890762)
  testSlope(dataSeries, 2, 4.006111116668519)
  testSlope(dataSeries, 1, 3.902777794446277)
  testSlope(dataSeries, 0, 3.7994444722240353)
  dataSeries.push(0.87, 1.438206667)
  testCoefficientA(dataSeries, 5.23333277777969)
  testCoefficientB(dataSeries, -4.158554672223021)
  testSlope(dataSeries, 10, 4.947444361113639)
  testSlope(dataSeries, 9, 4.842777705558046)
  testSlope(dataSeries, 8, 4.738111050002452)
  testSlope(dataSeries, 7, 4.633444394446858)
  testSlope(dataSeries, 6, 4.5287777388912644)
  testSlope(dataSeries, 5, 4.424111083335671)
  testSlope(dataSeries, 4, 4.319444427780079)
  testSlope(dataSeries, 3, 4.214777772224483)
  testSlope(dataSeries, 2, 4.1101111166688895)
  testSlope(dataSeries, 1, 4.005444461113296)
  testSlope(dataSeries, 0, 3.900777805557702)
  dataSeries.push(0.88, 1.488666667)
  testCoefficientA(dataSeries, 5.300000555555108)
  testCoefficientB(dataSeries, -4.264556438889798)
  testSlope(dataSeries, 10, 5.063444538887193)
  testSlope(dataSeries, 9, 4.95744452777609)
  testSlope(dataSeries, 8, 4.851444516664989)
  testSlope(dataSeries, 7, 4.745444505553886)
  testSlope(dataSeries, 6, 4.639444494442783)
  testSlope(dataSeries, 5, 4.533444483331682)
  testSlope(dataSeries, 4, 4.427444472220579)
  testSlope(dataSeries, 3, 4.321444461109477)
  testSlope(dataSeries, 2, 4.215444449998376)
  testSlope(dataSeries, 1, 4.109444438887273)
  testSlope(dataSeries, 0, 4.003444427776172)
  dataSeries.push(0.89, 1.540293333)
  testCoefficientA(dataSeries, 5.366666600000295)
  testCoefficientB(dataSeries, -4.3718889000008705)
  testSlope(dataSeries, 10, 5.180777647999655)
  testSlope(dataSeries, 9, 5.07344431599965)
  testSlope(dataSeries, 8, 4.966110983999643)
  testSlope(dataSeries, 7, 4.858777651999636)
  testSlope(dataSeries, 6, 4.7514443199996315)
  testSlope(dataSeries, 5, 4.644110987999625)
  testSlope(dataSeries, 4, 4.53677765599962)
  testSlope(dataSeries, 3, 4.429444323999613)
  testSlope(dataSeries, 2, 4.322110991999608)
  testSlope(dataSeries, 1, 4.214777659999601)
  testSlope(dataSeries, 0, 4.1074443279995965)
  dataSeries.push(0.9, 1.5931)
  testCoefficientA(dataSeries, 5.4333333999993)
  testCoefficientB(dataSeries, -4.480555566665852)
  testSlope(dataSeries, 10, 5.299444553332887)
  testSlope(dataSeries, 9, 5.190777885332902)
  testSlope(dataSeries, 8, 5.082111217332916)
  testSlope(dataSeries, 7, 4.973444549332929)
  testSlope(dataSeries, 6, 4.864777881332944)
  testSlope(dataSeries, 5, 4.756111213332958)
  testSlope(dataSeries, 4, 4.647444545332971)
  testSlope(dataSeries, 3, 4.538777877332985)
  testSlope(dataSeries, 2, 4.430111209332998)
  testSlope(dataSeries, 1, 4.3214445413330145)
  testSlope(dataSeries, 0, 4.212777873333027)
  dataSeries.push(0.91, 1.6471)
  testCoefficientA(dataSeries, 5.499999444446317)
  testCoefficientB(dataSeries, -4.59055462777715)
  testSlope(dataSeries, 10, 5.419444361115147)
  testSlope(dataSeries, 9, 5.309444372226221)
  testSlope(dataSeries, 8, 5.199444383337294)
  testSlope(dataSeries, 7, 5.089444394448368)
  testSlope(dataSeries, 6, 4.979444405559441)
  testSlope(dataSeries, 5, 4.869444416670515)
  testSlope(dataSeries, 4, 4.759444427781588)
  testSlope(dataSeries, 3, 4.649444438892662)
  testSlope(dataSeries, 2, 4.539444450003735)
  testSlope(dataSeries, 1, 4.429444461114809)
  testSlope(dataSeries, 0, 4.319444472225884)
  dataSeries.push(0.92, 1.702306667)
  testCoefficientA(dataSeries, 5.566667222221478)
  testCoefficientB(dataSeries, -4.701889816665797)
  testSlope(dataSeries, 10, 5.540777872221724)
  testSlope(dataSeries, 9, 5.429444527777295)
  testSlope(dataSeries, 8, 5.3181111833328645)
  testSlope(dataSeries, 7, 5.206777838888434)
  testSlope(dataSeries, 6, 5.095444494444005)
  testSlope(dataSeries, 5, 4.984111149999575)
  testSlope(dataSeries, 4, 4.872777805555146)
  testSlope(dataSeries, 3, 4.761444461110716)
  testSlope(dataSeries, 2, 4.650111116666287)
  testSlope(dataSeries, 1, 4.538777772221857)
  testSlope(dataSeries, 0, 4.427444427777428)
  dataSeries.push(0.93, 1.758733333)
  testCoefficientA(dataSeries, 5.633333888886947)
  testCoefficientB(dataSeries, -4.814556494444239)
  testSlope(dataSeries, 10, 5.663444538885483)
  testSlope(dataSeries, 9, 5.5507778611077425)
  testSlope(dataSeries, 8, 5.438111183330004)
  testSlope(dataSeries, 7, 5.325444505552265)
  testSlope(dataSeries, 6, 5.212777827774526)
  testSlope(dataSeries, 5, 5.1001111499967875)
  testSlope(dataSeries, 4, 4.987444472219049)
  testSlope(dataSeries, 3, 4.87477779444131)
  testSlope(dataSeries, 2, 4.7621111166635695)
  testSlope(dataSeries, 1, 4.649444438885831)
  testSlope(dataSeries, 0, 4.536777761108092)
  dataSeries.push(0.94, 1.816393333)
  testCoefficientA(dataSeries, 5.700000000001728)
  testCoefficientB(dataSeries, -4.928555566666198)
  testSlope(dataSeries, 10, 5.7874444333370505)
  testSlope(dataSeries, 9, 5.673444433337016)
  testSlope(dataSeries, 8, 5.5594444333369815)
  testSlope(dataSeries, 7, 5.445444433336947)
  testSlope(dataSeries, 6, 5.331444433336912)
  testSlope(dataSeries, 5, 5.217444433336878)
  testSlope(dataSeries, 4, 5.103444433336843)
  testSlope(dataSeries, 3, 4.989444433336809)
  testSlope(dataSeries, 2, 4.875444433336774)
  testSlope(dataSeries, 1, 4.76144443333674)
  testSlope(dataSeries, 0, 4.6474444333367035)
  dataSeries.push(0.95, 1.8753)
  testCoefficientA(dataSeries, 5.766666111109826)
  testCoefficientB(dataSeries, -5.043887916666718)
  testSlope(dataSeries, 10, 5.91277769444195)
  testSlope(dataSeries, 9, 5.797444372219753)
  testSlope(dataSeries, 8, 5.682111049997558)
  testSlope(dataSeries, 7, 5.566777727775363)
  testSlope(dataSeries, 6, 5.451444405553166)
  testSlope(dataSeries, 5, 5.336111083330969)
  testSlope(dataSeries, 4, 5.220777761108772)
  testSlope(dataSeries, 3, 5.105444438886576)
  testSlope(dataSeries, 2, 4.990111116664379)
  testSlope(dataSeries, 1, 4.874777794442182)
  testSlope(dataSeries, 0, 4.759444472219985)
  dataSeries.push(0.96, 1.935466667)
  testCoefficientA(dataSeries, 5.833332777779438)
  testCoefficientB(dataSeries, -5.160554572222174)
  testSlope(dataSeries, 10, 6.039444361114346)
  testSlope(dataSeries, 9, 5.922777705558757)
  testSlope(dataSeries, 8, 5.806111050003168)
  testSlope(dataSeries, 7, 5.689444394447581)
  testSlope(dataSeries, 6, 5.572777738891992)
  testSlope(dataSeries, 5, 5.4561110833364035)
  testSlope(dataSeries, 4, 5.339444427780815)
  testSlope(dataSeries, 3, 5.222777772225226)
  testSlope(dataSeries, 2, 5.106111116669637)
  testSlope(dataSeries, 1, 4.989444461114048)
  testSlope(dataSeries, 0, 4.872777805558459)
  dataSeries.push(0.97, 1.996906667)
  testCoefficientA(dataSeries, 5.900000555554085)
  testCoefficientB(dataSeries, -5.278556538889055)
  testSlope(dataSeries, 10, 6.16744453888587)
  testSlope(dataSeries, 9, 6.049444527774788)
  testSlope(dataSeries, 8, 5.9314445166637055)
  testSlope(dataSeries, 7, 5.813444505552623)
  testSlope(dataSeries, 6, 5.695444494441543)
  testSlope(dataSeries, 5, 5.577444483330461)
  testSlope(dataSeries, 4, 5.4594444722193805)
  testSlope(dataSeries, 3, 5.341444461108298)
  testSlope(dataSeries, 2, 5.223444449997216)
  testSlope(dataSeries, 1, 5.105444438886134)
  testSlope(dataSeries, 0, 4.987444427775052)
  dataSeries.push(0.98, 2.059633333)
  testCoefficientA(dataSeries, 5.966666599999896)
  testCoefficientB(dataSeries, -5.39788889999998)
  testSlope(dataSeries, 10, 6.296777635999815)
  testSlope(dataSeries, 9, 6.177444303999817)
  testSlope(dataSeries, 8, 6.05811097199982)
  testSlope(dataSeries, 7, 5.938777639999822)
  testSlope(dataSeries, 6, 5.819444307999824)
  testSlope(dataSeries, 5, 5.700110975999827)
  testSlope(dataSeries, 4, 5.580777643999829)
  testSlope(dataSeries, 3, 5.461444311999831)
  testSlope(dataSeries, 2, 5.342110979999832)
  testSlope(dataSeries, 1, 5.222777647999834)
  testSlope(dataSeries, 0, 5.1034443159998375)
  dataSeries.push(0.99, 2.12366)
  testCoefficientA(dataSeries, 6.033333400000233)
  testCoefficientB(dataSeries, -5.518555566666898)
  testSlope(dataSeries, 10, 6.427444565333562)
  testSlope(dataSeries, 9, 6.306777897333558)
  testSlope(dataSeries, 8, 6.1861112293335525)
  testSlope(dataSeries, 7, 6.065444561333549)
  testSlope(dataSeries, 6, 5.944777893333543)
  testSlope(dataSeries, 5, 5.824111225333538)
  testSlope(dataSeries, 4, 5.703444557333536)
  testSlope(dataSeries, 3, 5.5827778893335305)
  testSlope(dataSeries, 2, 5.462111221333525)
  testSlope(dataSeries, 1, 5.341444553333521)
  testSlope(dataSeries, 0, 5.220777885333516)
  dataSeries.push(1, 2.189)
  testCoefficientA(dataSeries, 6.099999444444811)
  testCoefficientB(dataSeries, -5.640554527777794)
  testSlope(dataSeries, 10, 6.5594443611118285)
  testSlope(dataSeries, 9, 6.437444372222932)
  testSlope(dataSeries, 8, 6.315444383334035)
  testSlope(dataSeries, 7, 6.19344439444514)
  testSlope(dataSeries, 6, 6.071444405556243)
  testSlope(dataSeries, 5, 5.949444416667347)
  testSlope(dataSeries, 4, 5.82744442777845)
  testSlope(dataSeries, 3, 5.705444438889555)
  testSlope(dataSeries, 2, 5.58344445000066)
  testSlope(dataSeries, 1, 5.461444461111763)
  testSlope(dataSeries, 0, 5.3394444722228664)
  dataSeries.push(1.01, 2.254875)
  testCoefficientA(dataSeries, 6.133333333333351)
  testCoefficientB(dataSeries, -5.680777180952511)
  testSlope(dataSeries, 10, 6.708556152380858)
  testSlope(dataSeries, 9, 6.5858894857141905)
  testSlope(dataSeries, 8, 6.463222819047523)
  testSlope(dataSeries, 7, 6.340556152380856)
  testSlope(dataSeries, 6, 6.217889485714188)
  testSlope(dataSeries, 5, 6.095222819047523)
  testSlope(dataSeries, 4, 5.9725561523808555)
  testSlope(dataSeries, 3, 5.849889485714188)
  testSlope(dataSeries, 2, 5.7272228190475225)
  testSlope(dataSeries, 1, 5.604556152380855)
  testSlope(dataSeries, 0, 5.481889485714188)
  dataSeries.push(1.02, 2.3205)
  testCoefficientA(dataSeries, 6.133333333333351)
  testCoefficientB(dataSeries, -5.680777180952511)
  testSlope(dataSeries, 10, 6.831222819047525)
  testSlope(dataSeries, 9, 6.708556152380858)
  testSlope(dataSeries, 8, 6.5858894857141905)
  testSlope(dataSeries, 7, 6.463222819047523)
  testSlope(dataSeries, 6, 6.340556152380856)
  testSlope(dataSeries, 5, 6.217889485714188)
  testSlope(dataSeries, 4, 6.095222819047523)
  testSlope(dataSeries, 3, 5.9725561523808555)
  testSlope(dataSeries, 2, 5.849889485714188)
  testSlope(dataSeries, 1, 5.7272228190475225)
  testSlope(dataSeries, 0, 5.604556152380855)
  dataSeries.push(1.03, 2.385875)
  testCoefficientA(dataSeries, 6.133333333333351)
  testCoefficientB(dataSeries, -5.680777180952511)
  testSlope(dataSeries, 10, 6.953889485714193)
  testSlope(dataSeries, 9, 6.831222819047525)
  testSlope(dataSeries, 8, 6.708556152380858)
  testSlope(dataSeries, 7, 6.5858894857141905)
  testSlope(dataSeries, 6, 6.463222819047523)
  testSlope(dataSeries, 5, 6.340556152380856)
  testSlope(dataSeries, 4, 6.217889485714188)
  testSlope(dataSeries, 3, 6.095222819047523)
  testSlope(dataSeries, 2, 5.9725561523808555)
  testSlope(dataSeries, 1, 5.849889485714188)
  testSlope(dataSeries, 0, 5.7272228190475225)
  dataSeries.push(1.04, 2.451)
  testCoefficientA(dataSeries, 6.133333333333351)
  testCoefficientB(dataSeries, -5.680777180952511)
  testSlope(dataSeries, 10, 7.076556152380858)
  testSlope(dataSeries, 9, 6.953889485714193)
  testSlope(dataSeries, 8, 6.831222819047525)
  testSlope(dataSeries, 7, 6.708556152380858)
  testSlope(dataSeries, 6, 6.5858894857141905)
  testSlope(dataSeries, 5, 6.463222819047523)
  testSlope(dataSeries, 4, 6.340556152380856)
  testSlope(dataSeries, 3, 6.217889485714188)
  testSlope(dataSeries, 2, 6.095222819047523)
  testSlope(dataSeries, 1, 5.9725561523808555)
  testSlope(dataSeries, 0, 5.849889485714188)
  dataSeries.push(1.05, 2.515875)
  testCoefficientA(dataSeries, 6.100000000000886)
  testCoefficientB(dataSeries, -5.640554527777794)
  testSlope(dataSeries, 10, 7.169445472224068)
  testSlope(dataSeries, 9, 7.047445472224049)
  testSlope(dataSeries, 8, 6.925445472224031)
  testSlope(dataSeries, 7, 6.803445472224014)
  testSlope(dataSeries, 6, 6.681445472223996)
  testSlope(dataSeries, 5, 6.559445472223978)
  testSlope(dataSeries, 4, 6.437445472223961)
  testSlope(dataSeries, 3, 6.315445472223943)
  testSlope(dataSeries, 2, 6.193445472223925)
  testSlope(dataSeries, 1, 6.071445472223908)
  testSlope(dataSeries, 0, 5.949445472223888)
  dataSeries.push(1.06, 2.5805)
  testCoefficientA(dataSeries, 6.033333400000233)
  testCoefficientB(dataSeries, -5.515000118000438)
  testSlope(dataSeries, 10, 7.275666690000056)
  testSlope(dataSeries, 9, 7.155000022000051)
  testSlope(dataSeries, 8, 7.0343333540000454)
  testSlope(dataSeries, 7, 6.913666686000042)
  testSlope(dataSeries, 6, 6.793000018000036)
  testSlope(dataSeries, 5, 6.672333350000033)
  testSlope(dataSeries, 4, 6.551666682000027)
  testSlope(dataSeries, 3, 6.431000014000022)
  testSlope(dataSeries, 2, 6.310333346000018)
  testSlope(dataSeries, 1, 6.1896666780000125)
  testSlope(dataSeries, 0, 6.069000010000009)
  dataSeries.push(1.07, 2.644875)
  testCoefficientA(dataSeries, 4.743749999999238)
  testCoefficientB(dataSeries, -3.3874445866669207)
  testSlope(dataSeries, 10, 6.76418041333145)
  testSlope(dataSeries, 9, 6.6693054133314655)
  testSlope(dataSeries, 8, 6.57443041333148)
  testSlope(dataSeries, 7, 6.479555413331496)
  testSlope(dataSeries, 6, 6.38468041333151)
  testSlope(dataSeries, 5, 6.289805413331526)
  testSlope(dataSeries, 4, 6.19493041333154)
  testSlope(dataSeries, 3, 6.100055413331556)
  testSlope(dataSeries, 2, 6.005180413331572)
  testSlope(dataSeries, 1, 5.910305413331586)
  testSlope(dataSeries, 0, 5.815430413331602)
  dataSeries.push(1.08, 2.709)
  testCoefficientA(dataSeries, 2.656481666669563)
  testCoefficientB(dataSeries, 1.1698422166667135)
  testSlope(dataSeries, 10, 6.907842616672969)
  testSlope(dataSeries, 9, 6.854712983339578)
  testSlope(dataSeries, 8, 6.801583350006187)
  testSlope(dataSeries, 7, 6.748453716672795)
  testSlope(dataSeries, 6, 6.695324083339404)
  testSlope(dataSeries, 5, 6.642194450006013)
  testSlope(dataSeries, 4, 6.589064816672622)
  testSlope(dataSeries, 3, 6.53593518333923)
  testSlope(dataSeries, 2, 6.482805550005839)
  testSlope(dataSeries, 1, 6.429675916672448)
  testSlope(dataSeries, 0, 6.3765462833390565)
  dataSeries.push(1.09, 2.772875)
  testCoefficientA(dataSeries, 0.5079167500004248)
  testCoefficientB(dataSeries, 5.056791475000537)
  testSlope(dataSeries, 10, 6.164049990001463)
  testSlope(dataSeries, 9, 6.153891655001455)
  testSlope(dataSeries, 8, 6.143733320001447)
  testSlope(dataSeries, 7, 6.133574985001438)
  testSlope(dataSeries, 6, 6.123416650001429)
  testSlope(dataSeries, 5, 6.113258315001421)
  testSlope(dataSeries, 4, 6.103099980001412)
  testSlope(dataSeries, 3, 6.092941645001404)
  testSlope(dataSeries, 2, 6.082783310001395)
  testSlope(dataSeries, 1, 6.0726249750013865)
  testSlope(dataSeries, 0, 6.062466640001379)
  dataSeries.push(1.1, 2.8365)
  testCoefficientA(dataSeries, -0.813888888884021)
  testCoefficientB(dataSeries, 8.197250000000528)
  testSlope(dataSeries, 10, 6.406694444455682)
  testSlope(dataSeries, 9, 6.422972222233362)
  testSlope(dataSeries, 8, 6.439250000011042)
  testSlope(dataSeries, 7, 6.455527777788723)
  testSlope(dataSeries, 6, 6.471805555566403)
  testSlope(dataSeries, 5, 6.4880833333440835)
  testSlope(dataSeries, 4, 6.5043611111217645)
  testSlope(dataSeries, 3, 6.520638888899445)
  testSlope(dataSeries, 2, 6.536916666677125)
  testSlope(dataSeries, 1, 6.553194444454806)
  testSlope(dataSeries, 0, 6.569472222232486)
  dataSeries.push(1.11, 2.899875)
  testCoefficientA(dataSeries, -1.2499999999804303) // From data generation, CoefficientA should be -1.25
  testCoefficientB(dataSeries, 9.099999999995662)
  testSlope(dataSeries, 10, 6.325000000039106) // From data generation, Slope should be 6.325
  testSlope(dataSeries, 9, 6.350000000038715) // From data generation, Slope should be 6.350
  testSlope(dataSeries, 8, 6.375000000038323)
  testSlope(dataSeries, 7, 6.400000000037933)
  testSlope(dataSeries, 6, 6.4250000000375405)
  testSlope(dataSeries, 5, 6.45000000003715)
  testSlope(dataSeries, 4, 6.475000000036758)
  testSlope(dataSeries, 3, 6.5000000000363665)
  testSlope(dataSeries, 2, 6.525000000035975)
  testSlope(dataSeries, 1, 6.550000000035584)
  testSlope(dataSeries, 0, 6.5750000000351925)
  dataSeries.push(1.12, 2.963)
  testCoefficientA(dataSeries, -1.2499999999943079) // From data generation, CoefficientA should be -1.25
  testCoefficientB(dataSeries, 9.099999999999001) // From data generation, CoefficientB should be 6.3
  testSlope(dataSeries, 10, 6.300000000011751) // From data generation, Slope should be 6.300
  testSlope(dataSeries, 9, 6.325000000011638) // From data generation, Slope should be 6.325
  testSlope(dataSeries, 8, 6.350000000011524) // From data generation, Slope should be 6.350
  testSlope(dataSeries, 7, 6.3750000000114095) // From data generation, Slope should be 6.357
  testSlope(dataSeries, 6, 6.400000000011296) // From data generation, Slope should be 6.400
  testSlope(dataSeries, 5, 6.425000000011183) // From data generation, Slope should be 6.425
  testSlope(dataSeries, 4, 6.450000000011069) // From data generation, Slope should be 6.450
  testSlope(dataSeries, 3, 6.475000000010954) // From data generation, Slope should be 6.475
  testSlope(dataSeries, 2, 6.500000000010841) // From data generation, Slope should be 6.500
  testSlope(dataSeries, 1, 6.525000000010727) // From data generation, Slope should be 6.525
  testSlope(dataSeries, 0, 6.550000000010613) // From data generation, Slope should be 6.550
  dataSeries.push(1.13, 3.025875)
  dataSeries.push(1.14, 3.0885)
  dataSeries.push(1.15, 3.150875)
  dataSeries.push(1.16, 3.213)
  dataSeries.push(1.17, 3.274875)
  dataSeries.push(1.18, 3.3365)
  dataSeries.push(1.19, 3.397875)
  dataSeries.push(1.2, 3.459)
  dataSeries.push(1.21, 3.519875)
  dataSeries.push(1.22, 3.5805)
  dataSeries.push(1.23, 3.640875)
  dataSeries.push(1.24, 3.701)
  dataSeries.push(1.25, 3.760875)
  dataSeries.push(1.26, 3.8205)
  dataSeries.push(1.27, 3.879875)
  dataSeries.push(1.28, 3.939)
  dataSeries.push(1.29, 3.997875)
  dataSeries.push(1.3, 4.0565)
  dataSeries.push(1.31, 4.114875)
  dataSeries.push(1.32, 4.173)
  dataSeries.push(1.33, 4.230875)
  dataSeries.push(1.34, 4.2885)
  dataSeries.push(1.35, 4.345875)
  dataSeries.push(1.36, 4.403)
  dataSeries.push(1.37, 4.459875)
  dataSeries.push(1.38, 4.5165)
  dataSeries.push(1.39, 4.572875)
  dataSeries.push(1.4, 4.629)
  dataSeries.push(1.41, 4.684875)
  dataSeries.push(1.42, 4.7405)
  dataSeries.push(1.43, 4.795875)
  dataSeries.push(1.44, 4.851)
  dataSeries.push(1.45, 4.905875)
  dataSeries.push(1.46, 4.9605)
  dataSeries.push(1.47, 5.014875)
  dataSeries.push(1.48, 5.069)
  dataSeries.push(1.49, 5.122875)
  dataSeries.push(1.5, 5.1765)
  dataSeries.push(1.51, 5.229875)
  dataSeries.push(1.52, 5.283)
  dataSeries.push(1.53, 5.335875)
  dataSeries.push(1.54, 5.3885)
  dataSeries.push(1.55, 5.440875)
  dataSeries.push(1.56, 5.493)
  dataSeries.push(1.57, 5.544875)
  dataSeries.push(1.58, 5.5965)
  dataSeries.push(1.59, 5.647875)
  dataSeries.push(1.6, 5.699)
  dataSeries.push(1.61, 5.749875)
  dataSeries.push(1.62, 5.8005)
  dataSeries.push(1.63, 5.850875)
  dataSeries.push(1.64, 5.901)
  dataSeries.push(1.65, 5.950875)
  dataSeries.push(1.66, 6.0005)
  dataSeries.push(1.67, 6.049875)
  dataSeries.push(1.68, 6.099)
  dataSeries.push(1.69, 6.147875)
  dataSeries.push(1.7, 6.1965)
  dataSeries.push(1.71, 6.244875)
  dataSeries.push(1.72, 6.293)
  dataSeries.push(1.73, 6.340875)
  dataSeries.push(1.74, 6.3885)
  dataSeries.push(1.75, 6.435875)
  dataSeries.push(1.76, 6.483)
  dataSeries.push(1.77, 6.529875)
  dataSeries.push(1.78, 6.5765)
  dataSeries.push(1.79, 6.622875)
  dataSeries.push(1.8, 6.669)
  dataSeries.push(1.81, 6.714875)
  dataSeries.push(1.82, 6.7605)
  dataSeries.push(1.83, 6.805875)
  dataSeries.push(1.84, 6.851)
  dataSeries.push(1.85, 6.895875)
  dataSeries.push(1.86, 6.9405)
  dataSeries.push(1.87, 6.984875)
  dataSeries.push(1.88, 7.029)
  dataSeries.push(1.89, 7.072875)
  dataSeries.push(1.9, 7.1165)
  dataSeries.push(1.91, 7.159875)
  dataSeries.push(1.92, 7.203)
  dataSeries.push(1.93, 7.245875)
  dataSeries.push(1.94, 7.2885)
  dataSeries.push(1.95, 7.330875)
  dataSeries.push(1.96, 7.373)
  dataSeries.push(1.97, 7.414875)
  dataSeries.push(1.98, 7.4565)
  dataSeries.push(1.99, 7.497875)
  dataSeries.push(2, 7.539)
  dataSeries.push(2.01, 7.579875)
  dataSeries.push(2.02, 7.6205)
  dataSeries.push(2.03, 7.660875)
  dataSeries.push(2.04, 7.701)
  dataSeries.push(2.05, 7.740875)
  dataSeries.push(2.06, 7.7805)
  dataSeries.push(2.07, 7.819875)
  dataSeries.push(2.08, 7.859)
  dataSeries.push(2.09, 7.897875)
  dataSeries.push(2.1, 7.9365)
  dataSeries.push(2.11, 7.974875)
  dataSeries.push(2.12, 8.013)
  dataSeries.push(2.13, 8.050875)
  dataSeries.push(2.14, 8.0885)
  dataSeries.push(2.15, 8.125875)
  dataSeries.push(2.16, 8.163)
  dataSeries.push(2.17, 8.199875)
  dataSeries.push(2.18, 8.2365)
  dataSeries.push(2.19, 8.272875)
  dataSeries.push(2.2, 8.309)
  dataSeries.push(2.21, 8.344875)
  dataSeries.push(2.22, 8.3805)
  dataSeries.push(2.23, 8.415875)
  dataSeries.push(2.24, 8.451)
  dataSeries.push(2.25, 8.485875)
  dataSeries.push(2.26, 8.5205)
  dataSeries.push(2.27, 8.554875)
  dataSeries.push(2.28, 8.589)
  dataSeries.push(2.29, 8.622875)
  dataSeries.push(2.3, 8.6565)
  dataSeries.push(2.31, 8.689875)
  dataSeries.push(2.32, 8.723)
  dataSeries.push(2.33, 8.755875)
  dataSeries.push(2.34, 8.7885)
  dataSeries.push(2.35, 8.820875)
  dataSeries.push(2.36, 8.853)
  dataSeries.push(2.37, 8.884875)
  dataSeries.push(2.38, 8.9165)
  dataSeries.push(2.39, 8.947875)
  dataSeries.push(2.4, 8.979)
  dataSeries.push(2.41, 9.009875)
  dataSeries.push(2.42, 9.0405)
  dataSeries.push(2.43, 9.070875)
  dataSeries.push(2.44, 9.101)
  dataSeries.push(2.45, 9.130875)
  dataSeries.push(2.46, 9.1605)
  dataSeries.push(2.47, 9.189875)
  dataSeries.push(2.48, 9.219)
  dataSeries.push(2.49, 9.247875)
  dataSeries.push(2.5, 9.2765)
  dataSeries.push(2.51, 9.304875)
  dataSeries.push(2.52, 9.333)
  dataSeries.push(2.53, 9.360875)
  dataSeries.push(2.54, 9.3885)
  dataSeries.push(2.55, 9.415875)
  dataSeries.push(2.56, 9.443)
  dataSeries.push(2.57, 9.469875)
  dataSeries.push(2.58, 9.4965)
  dataSeries.push(2.59, 9.522875)
  dataSeries.push(2.6, 9.549)
  dataSeries.push(2.61, 9.574875)
  dataSeries.push(2.62, 9.6005)
  dataSeries.push(2.63, 9.625875)
  dataSeries.push(2.64, 9.651)
  dataSeries.push(2.65, 9.675875)
  dataSeries.push(2.66, 9.7005)
  dataSeries.push(2.67, 9.724875)
  dataSeries.push(2.68, 9.749)
  dataSeries.push(2.69, 9.772875)
  dataSeries.push(2.7, 9.7965)
  dataSeries.push(2.71, 9.819875)
  dataSeries.push(2.72, 9.843)
  dataSeries.push(2.73, 9.865875)
  dataSeries.push(2.74, 9.8885)
  dataSeries.push(2.75, 9.910875)
  dataSeries.push(2.76, 9.933)
  dataSeries.push(2.77, 9.954875)
  dataSeries.push(2.78, 9.9765)
  dataSeries.push(2.79, 9.997875)
  dataSeries.push(2.8, 10.019)
  dataSeries.push(2.81, 10.039875)
  dataSeries.push(2.82, 10.0605)
  dataSeries.push(2.83, 10.080875)
  dataSeries.push(2.84, 10.101)
  dataSeries.push(2.85, 10.120875)
  dataSeries.push(2.86, 10.1405)
  dataSeries.push(2.87, 10.159875)
  dataSeries.push(2.88, 10.179)
  dataSeries.push(2.89, 10.197875)
  dataSeries.push(2.9, 10.2165)
  dataSeries.push(2.91, 10.234875)
  dataSeries.push(2.92, 10.253)
  dataSeries.push(2.93, 10.270875)
  dataSeries.push(2.94, 10.2885)
  dataSeries.push(2.95, 10.305875)
  dataSeries.push(2.96, 10.323)
  dataSeries.push(2.97, 10.339875)
  dataSeries.push(2.98, 10.3565)
  dataSeries.push(2.99, 10.372875)
  // reportAll(dataSeries)
  testCoefficientA(dataSeries, -1.2500000000030973) // From data generation, CoefficientA should be
  testCoefficientB(dataSeries, 9.09999999999964) // From data generation, CoefficientB should be
  testSlope(dataSeries, 10, 1.6249999999811182) // From data generation, Slope should be 1.625
  testSlope(dataSeries, 9, 1.6499999999811807) // From data generation, Slope should be 1.650
  testSlope(dataSeries, 8, 1.6749999999812424) // From data generation, Slope should be 1.675
  testSlope(dataSeries, 7, 1.699999999981305) // From data generation, Slope should be 1.700
  testSlope(dataSeries, 6, 1.7249999999813665) // From data generation, Slope should be 1.725
  testSlope(dataSeries, 5, 1.749999999981429) // From data generation, Slope should be 1.750
  testSlope(dataSeries, 4, 1.7749999999814898) // From data generation, Slope should be 1.775
  testSlope(dataSeries, 3, 1.7999999999815524) // From data generation, Slope should be 1.800
  testSlope(dataSeries, 2, 1.824999999981614) // From data generation, Slope should be 1.825
  testSlope(dataSeries, 1, 1.8499999999816765) // From data generation, Slope should be 1.850
  testSlope(dataSeries, 0, 1.8749999999817382) // From data generation, Slope should be 1.875
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  dataSeries.push(1.742824123, 191.6371519)
  dataSeries.push(1.752832884, 192.6843494)
  dataSeries.push(1.762981204, 193.731547)
  dataSeries.push(1.773200619, 194.7787445)
  dataSeries.push(1.783371718, 195.8259421)
  dataSeries.push(1.793310384, 196.8731396)
  dataSeries.push(1.803277532, 197.9203372)
  dataSeries.push(1.81336761, 198.9675347)
  dataSeries.push(1.82355469, 200.0147323)
  dataSeries.push(1.833878404, 201.0619298)
  dataSeries.push(1.843990593, 202.1091274)
  dataSeries.push(1.854018576, 203.1563249)
  dataSeries.push(1.864139501, 204.2035225)
  dataSeries.push(1.874303908, 205.25072)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  dataSeries.push(1.742824123, 191.6371519)
  dataSeries.push(1.752832884, 192.6843494)
  dataSeries.push(1.762981204, 193.731547)
  dataSeries.push(1.773200619, 194.7787445)
  dataSeries.push(1.783371718, 195.8259421)
  dataSeries.push(1.793310384, 196.8731396)
  dataSeries.push(1.803277532, 197.9203372)
  dataSeries.push(1.81336761, 198.9675347)
  dataSeries.push(1.82355469, 200.0147323)
  dataSeries.push(1.833878404, 201.0619298)
  dataSeries.push(1.843990593, 202.1091274)
  dataSeries.push(1.854018576, 203.1563249)
  dataSeries.push(1.864139501, 204.2035225)
  dataSeries.push(1.874303908, 205.25072)
  dataSeries.push(1.884755695, 206.2979176)
  dataSeries.push(1.895014532, 207.3451151)
  dataSeries.push(1.905196774, 208.3923127)
  dataSeries.push(1.915241178, 209.4395102)
  dataSeries.push(1.925765282, 210.4867078)
  dataSeries.push(1.935653441, 211.5339053)
  dataSeries.push(1.946034744, 212.5811029)
  dataSeries.push(1.956463382, 213.6283004)
  dataSeries.push(1.966728403, 214.675498)
  dataSeries.push(1.976873347, 215.7226955)
  dataSeries.push(1.987195593, 216.7698931)
  dataSeries.push(1.997677121, 217.8170906)
  dataSeries.push(2.007913975, 218.8642882)
  dataSeries.push(2.01841843, 219.9114858)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  dataSeries.push(1.742824123, 191.6371519)
  dataSeries.push(1.752832884, 192.6843494)
  dataSeries.push(1.762981204, 193.731547)
  dataSeries.push(1.773200619, 194.7787445)
  dataSeries.push(1.783371718, 195.8259421)
  dataSeries.push(1.793310384, 196.8731396)
  dataSeries.push(1.803277532, 197.9203372)
  dataSeries.push(1.81336761, 198.9675347)
  dataSeries.push(1.82355469, 200.0147323)
  dataSeries.push(1.833878404, 201.0619298)
  dataSeries.push(1.843990593, 202.1091274)
  dataSeries.push(1.854018576, 203.1563249)
  dataSeries.push(1.864139501, 204.2035225)
  dataSeries.push(1.874303908, 205.25072)
  dataSeries.push(1.884755695, 206.2979176)
  dataSeries.push(1.895014532, 207.3451151)
  dataSeries.push(1.905196774, 208.3923127)
  dataSeries.push(1.915241178, 209.4395102)
  dataSeries.push(1.925765282, 210.4867078)
  dataSeries.push(1.935653441, 211.5339053)
  dataSeries.push(1.946034744, 212.5811029)
  dataSeries.push(1.956463382, 213.6283004)
  dataSeries.push(1.966728403, 214.675498)
  dataSeries.push(1.976873347, 215.7226955)
  dataSeries.push(1.987195593, 216.7698931)
  dataSeries.push(1.997677121, 217.8170906)
  dataSeries.push(2.007913975, 218.8642882)
  dataSeries.push(2.01841843, 219.9114858)
  dataSeries.push(2.028724323, 220.9586833)
  dataSeries.push(2.038960029, 222.0058809)
  dataSeries.push(2.049296979, 223.0530784)
  dataSeries.push(2.059709079, 224.100276)
  dataSeries.push(2.07020983, 225.1474735)
  dataSeries.push(2.080774175, 226.1946711)
  dataSeries.push(2.091285815, 227.2418686)
  dataSeries.push(2.101523706, 228.2890662)
  dataSeries.push(2.111897139, 229.3362637)
  dataSeries.push(2.122329592, 230.3834613)
  dataSeries.push(2.132907159, 231.4306588)
  dataSeries.push(2.143543784, 232.4778564)
  dataSeries.push(2.153975644, 233.5250539)
  dataSeries.push(2.164344687, 234.5722515)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  dataSeries.push(1.742824123, 191.6371519)
  dataSeries.push(1.752832884, 192.6843494)
  dataSeries.push(1.762981204, 193.731547)
  dataSeries.push(1.773200619, 194.7787445)
  dataSeries.push(1.783371718, 195.8259421)
  dataSeries.push(1.793310384, 196.8731396)
  dataSeries.push(1.803277532, 197.9203372)
  dataSeries.push(1.81336761, 198.9675347)
  dataSeries.push(1.82355469, 200.0147323)
  dataSeries.push(1.833878404, 201.0619298)
  dataSeries.push(1.843990593, 202.1091274)
  dataSeries.push(1.854018576, 203.1563249)
  dataSeries.push(1.864139501, 204.2035225)
  dataSeries.push(1.874303908, 205.25072)
  dataSeries.push(1.884755695, 206.2979176)
  dataSeries.push(1.895014532, 207.3451151)
  dataSeries.push(1.905196774, 208.3923127)
  dataSeries.push(1.915241178, 209.4395102)
  dataSeries.push(1.925765282, 210.4867078)
  dataSeries.push(1.935653441, 211.5339053)
  dataSeries.push(1.946034744, 212.5811029)
  dataSeries.push(1.956463382, 213.6283004)
  dataSeries.push(1.966728403, 214.675498)
  dataSeries.push(1.976873347, 215.7226955)
  dataSeries.push(1.987195593, 216.7698931)
  dataSeries.push(1.997677121, 217.8170906)
  dataSeries.push(2.007913975, 218.8642882)
  dataSeries.push(2.01841843, 219.9114858)
  dataSeries.push(2.028724323, 220.9586833)
  dataSeries.push(2.038960029, 222.0058809)
  dataSeries.push(2.049296979, 223.0530784)
  dataSeries.push(2.059709079, 224.100276)
  dataSeries.push(2.07020983, 225.1474735)
  dataSeries.push(2.080774175, 226.1946711)
  dataSeries.push(2.091285815, 227.2418686)
  dataSeries.push(2.101523706, 228.2890662)
  dataSeries.push(2.111897139, 229.3362637)
  dataSeries.push(2.122329592, 230.3834613)
  dataSeries.push(2.132907159, 231.4306588)
  dataSeries.push(2.143543784, 232.4778564)
  dataSeries.push(2.153975644, 233.5250539)
  dataSeries.push(2.164344687, 234.5722515)
  dataSeries.push(2.174775103, 235.619449)
  dataSeries.push(2.18537006, 236.6666466)
  dataSeries.push(2.196043798, 237.7138441)
  dataSeries.push(2.206787001, 238.7610417)
  dataSeries.push(2.217289863, 239.8082392)
  dataSeries.push(2.227728464, 240.8554368)
  dataSeries.push(2.238242456, 241.9026343)
  dataSeries.push(2.248834265, 242.9498319)
  dataSeries.push(2.259552782, 243.9970294)
  dataSeries.push(2.270334671, 245.044227)
  dataSeries.push(2.28104578, 246.0914245)
  dataSeries.push(2.291509178, 247.1386221)
  dataSeries.push(2.302206342, 248.1858196)
  dataSeries.push(2.312773854, 249.2330172)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  dataSeries.push(1.742824123, 191.6371519)
  dataSeries.push(1.752832884, 192.6843494)
  dataSeries.push(1.762981204, 193.731547)
  dataSeries.push(1.773200619, 194.7787445)
  dataSeries.push(1.783371718, 195.8259421)
  dataSeries.push(1.793310384, 196.8731396)
  dataSeries.push(1.803277532, 197.9203372)
  dataSeries.push(1.81336761, 198.9675347)
  dataSeries.push(1.82355469, 200.0147323)
  dataSeries.push(1.833878404, 201.0619298)
  dataSeries.push(1.843990593, 202.1091274)
  dataSeries.push(1.854018576, 203.1563249)
  dataSeries.push(1.864139501, 204.2035225)
  dataSeries.push(1.874303908, 205.25072)
  dataSeries.push(1.884755695, 206.2979176)
  dataSeries.push(1.895014532, 207.3451151)
  dataSeries.push(1.905196774, 208.3923127)
  dataSeries.push(1.915241178, 209.4395102)
  dataSeries.push(1.925765282, 210.4867078)
  dataSeries.push(1.935653441, 211.5339053)
  dataSeries.push(1.946034744, 212.5811029)
  dataSeries.push(1.956463382, 213.6283004)
  dataSeries.push(1.966728403, 214.675498)
  dataSeries.push(1.976873347, 215.7226955)
  dataSeries.push(1.987195593, 216.7698931)
  dataSeries.push(1.997677121, 217.8170906)
  dataSeries.push(2.007913975, 218.8642882)
  dataSeries.push(2.01841843, 219.9114858)
  dataSeries.push(2.028724323, 220.9586833)
  dataSeries.push(2.038960029, 222.0058809)
  dataSeries.push(2.049296979, 223.0530784)
  dataSeries.push(2.059709079, 224.100276)
  dataSeries.push(2.07020983, 225.1474735)
  dataSeries.push(2.080774175, 226.1946711)
  dataSeries.push(2.091285815, 227.2418686)
  dataSeries.push(2.101523706, 228.2890662)
  dataSeries.push(2.111897139, 229.3362637)
  dataSeries.push(2.122329592, 230.3834613)
  dataSeries.push(2.132907159, 231.4306588)
  dataSeries.push(2.143543784, 232.4778564)
  dataSeries.push(2.153975644, 233.5250539)
  dataSeries.push(2.164344687, 234.5722515)
  dataSeries.push(2.174775103, 235.619449)
  dataSeries.push(2.18537006, 236.6666466)
  dataSeries.push(2.196043798, 237.7138441)
  dataSeries.push(2.206787001, 238.7610417)
  dataSeries.push(2.217289863, 239.8082392)
  dataSeries.push(2.227728464, 240.8554368)
  dataSeries.push(2.238242456, 241.9026343)
  dataSeries.push(2.248834265, 242.9498319)
  dataSeries.push(2.259552782, 243.9970294)
  dataSeries.push(2.270334671, 245.044227)
  dataSeries.push(2.28104578, 246.0914245)
  dataSeries.push(2.291509178, 247.1386221)
  dataSeries.push(2.302206342, 248.1858196)
  dataSeries.push(2.312773854, 249.2330172)
  dataSeries.push(2.32357041, 250.2802147)
  dataSeries.push(2.334544378, 251.3274123)
  dataSeries.push(2.345140057, 252.3746098)
  dataSeries.push(2.355704773, 253.4218074)
  dataSeries.push(2.366406178, 254.4690049)
  dataSeries.push(2.388077828, 255.5162025)
  dataSeries.push(2.377112731, 256.5634)
  dataSeries.push(2.39905287, 257.6105976)
  dataSeries.push(2.409725663, 258.6577951)
  dataSeries.push(2.420345677, 259.7049927)
  dataSeries.push(2.431094398, 260.7521902)
  dataSeries.push(2.441909455, 261.7993878)
  dataSeries.push(2.452858737, 262.8465854)
  dataSeries.push(2.46391706, 263.8937829)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  dataSeries.push(1.742824123, 191.6371519)
  dataSeries.push(1.752832884, 192.6843494)
  dataSeries.push(1.762981204, 193.731547)
  dataSeries.push(1.773200619, 194.7787445)
  dataSeries.push(1.783371718, 195.8259421)
  dataSeries.push(1.793310384, 196.8731396)
  dataSeries.push(1.803277532, 197.9203372)
  dataSeries.push(1.81336761, 198.9675347)
  dataSeries.push(1.82355469, 200.0147323)
  dataSeries.push(1.833878404, 201.0619298)
  dataSeries.push(1.843990593, 202.1091274)
  dataSeries.push(1.854018576, 203.1563249)
  dataSeries.push(1.864139501, 204.2035225)
  dataSeries.push(1.874303908, 205.25072)
  dataSeries.push(1.884755695, 206.2979176)
  dataSeries.push(1.895014532, 207.3451151)
  dataSeries.push(1.905196774, 208.3923127)
  dataSeries.push(1.915241178, 209.4395102)
  dataSeries.push(1.925765282, 210.4867078)
  dataSeries.push(1.935653441, 211.5339053)
  dataSeries.push(1.946034744, 212.5811029)
  dataSeries.push(1.956463382, 213.6283004)
  dataSeries.push(1.966728403, 214.675498)
  dataSeries.push(1.976873347, 215.7226955)
  dataSeries.push(1.987195593, 216.7698931)
  dataSeries.push(1.997677121, 217.8170906)
  dataSeries.push(2.007913975, 218.8642882)
  dataSeries.push(2.01841843, 219.9114858)
  dataSeries.push(2.028724323, 220.9586833)
  dataSeries.push(2.038960029, 222.0058809)
  dataSeries.push(2.049296979, 223.0530784)
  dataSeries.push(2.059709079, 224.100276)
  dataSeries.push(2.07020983, 225.1474735)
  dataSeries.push(2.080774175, 226.1946711)
  dataSeries.push(2.091285815, 227.2418686)
  dataSeries.push(2.101523706, 228.2890662)
  dataSeries.push(2.111897139, 229.3362637)
  dataSeries.push(2.122329592, 230.3834613)
  dataSeries.push(2.132907159, 231.4306588)
  dataSeries.push(2.143543784, 232.4778564)
  dataSeries.push(2.153975644, 233.5250539)
  dataSeries.push(2.164344687, 234.5722515)
  dataSeries.push(2.174775103, 235.619449)
  dataSeries.push(2.18537006, 236.6666466)
  dataSeries.push(2.196043798, 237.7138441)
  dataSeries.push(2.206787001, 238.7610417)
  dataSeries.push(2.217289863, 239.8082392)
  dataSeries.push(2.227728464, 240.8554368)
  dataSeries.push(2.238242456, 241.9026343)
  dataSeries.push(2.248834265, 242.9498319)
  dataSeries.push(2.259552782, 243.9970294)
  dataSeries.push(2.270334671, 245.044227)
  dataSeries.push(2.28104578, 246.0914245)
  dataSeries.push(2.291509178, 247.1386221)
  dataSeries.push(2.302206342, 248.1858196)
  dataSeries.push(2.312773854, 249.2330172)
  dataSeries.push(2.32357041, 250.2802147)
  dataSeries.push(2.334544378, 251.3274123)
  dataSeries.push(2.345140057, 252.3746098)
  dataSeries.push(2.355704773, 253.4218074)
  dataSeries.push(2.366406178, 254.4690049)
  dataSeries.push(2.388077828, 255.5162025)
  dataSeries.push(2.377112731, 256.5634)
  dataSeries.push(2.39905287, 257.6105976)
  dataSeries.push(2.409725663, 258.6577951)
  dataSeries.push(2.420345677, 259.7049927)
  dataSeries.push(2.431094398, 260.7521902)
  dataSeries.push(2.441909455, 261.7993878)
  dataSeries.push(2.452858737, 262.8465854)
  dataSeries.push(2.46391706, 263.8937829)
  dataSeries.push(2.474722505, 264.9409805)
  dataSeries.push(2.485543876, 265.988178)
  dataSeries.push(2.496390896, 267.0353756)
  dataSeries.push(2.507331067, 268.0825731)
  dataSeries.push(2.518307257, 269.1297707)
  dataSeries.push(2.52936871, 270.1769682)
  dataSeries.push(2.540211545, 271.2241658)
  dataSeries.push(2.55104188, 272.2713633)
  dataSeries.push(2.561913586, 273.3185609)
  dataSeries.push(2.572876128, 274.3657584)
  dataSeries.push(2.584076195, 275.412956)
  dataSeries.push(2.595270059, 276.4601535)
  dataSeries.push(2.606227046, 277.5073511)
  dataSeries.push(2.617122716, 278.5545486)
  reportAll(dataSeries)
})

test('Quadratic TS Estimation on a real stroke', () => {
  // As ORM will encounter changing forces during the stroke
  const dataSeries = createTSQuadraticSeries(11)
  dataSeries.push(0, 0)
  dataSeries.push(0.011081761, 1.047197551)
  dataSeries.push(0.022144058, 2.094395102)
  dataSeries.push(0.033226671, 3.141592654)
  dataSeries.push(0.044391231, 4.188790205)
  dataSeries.push(0.055612867, 5.235987756)
  dataSeries.push(0.066788371, 6.283185307)
  dataSeries.push(0.077708127, 7.330382858)
  dataSeries.push(0.088572437, 8.37758041)
  dataSeries.push(0.09962429, 9.424777961)
  dataSeries.push(0.110272909, 10.47197551)
  dataSeries.push(0.121246222, 11.51917306)
  dataSeries.push(0.132376485, 12.56637061)
  dataSeries.push(0.142763169, 13.61356817)
  dataSeries.push(0.15328932, 14.66076572)
  dataSeries.push(0.163826138, 15.70796327)
  dataSeries.push(0.174337363, 16.75516082)
  dataSeries.push(0.184990759, 17.80235837)
  dataSeries.push(0.195510874, 18.84955592)
  dataSeries.push(0.205921522, 19.89675347)
  dataSeries.push(0.216005901, 20.94395102)
  dataSeries.push(0.226151523, 21.99114858)
  dataSeries.push(0.236360017, 23.03834613)
  dataSeries.push(0.246560196, 24.08554368)
  dataSeries.push(0.256813469, 25.13274123)
  dataSeries.push(0.266811586, 26.17993878)
  dataSeries.push(0.276675069, 27.22713633)
  dataSeries.push(0.286590054, 28.27433388)
  dataSeries.push(0.296474353, 29.32153143)
  dataSeries.push(0.306319855, 30.36872898)
  dataSeries.push(0.316180579, 31.41592654)
  dataSeries.push(0.325871835, 32.46312409)
  dataSeries.push(0.33533864, 33.51032164)
  dataSeries.push(0.344828149, 34.55751919)
  dataSeries.push(0.354364826, 35.60471674)
  dataSeries.push(0.363965746, 36.65191429)
  dataSeries.push(0.373510183, 37.69911184)
  dataSeries.push(0.382976043, 38.74630939)
  dataSeries.push(0.392286584, 39.79350695)
  dataSeries.push(0.40163207, 40.8407045)
  dataSeries.push(0.410732456, 41.88790205)
  dataSeries.push(0.420041719, 42.9350996)
  dataSeries.push(0.429384372, 43.98229715)
  dataSeries.push(0.43850913, 45.0294947)
  dataSeries.push(0.447510736, 46.07669225)
  dataSeries.push(0.456562473, 47.1238898)
  dataSeries.push(0.465673823, 48.17108736)
  dataSeries.push(0.474768543, 49.21828491)
  dataSeries.push(0.48399884, 50.26548246)
  dataSeries.push(0.493012594, 51.31268001)
  dataSeries.push(0.50200894, 52.35987756)
  dataSeries.push(0.510721185, 53.40707511)
  dataSeries.push(0.519593842, 54.45427266)
  dataSeries.push(0.528624985, 55.50147021)
  dataSeries.push(0.537590627, 56.54866776)
  dataSeries.push(0.54643632, 57.59586532)
  dataSeries.push(0.5552034, 58.64306287)
  dataSeries.push(0.563983962, 59.69026042)
  dataSeries.push(0.572796192, 60.73745797)
  dataSeries.push(0.581727665, 61.78465552)
  dataSeries.push(0.590638693, 62.83185307)
  dataSeries.push(0.599554425, 63.87905062)
  dataSeries.push(0.608029293, 64.92624817)
  dataSeries.push(0.616722537, 65.97344573)
  dataSeries.push(0.625524414, 67.02064328)
  dataSeries.push(0.634321476, 68.06784083)
  dataSeries.push(0.643212856, 69.11503838)
  dataSeries.push(0.651964583, 70.16223593)
  dataSeries.push(0.66068594, 71.20943348)
  dataSeries.push(0.66942713, 72.25663103)
  dataSeries.push(0.678244193, 73.30382858)
  dataSeries.push(0.687232057, 74.35102613)
  dataSeries.push(0.696202328, 75.39822369)
  dataSeries.push(0.70497376, 76.44542124)
  dataSeries.push(0.71371371, 77.49261879)
  dataSeries.push(0.722476327, 78.53981634)
  dataSeries.push(0.731444876, 79.58701389)
  dataSeries.push(0.740384905, 80.63421144)
  dataSeries.push(0.749420437, 81.68140899)
  dataSeries.push(0.758243166, 82.72860654)
  dataSeries.push(0.767102582, 83.7758041)
  dataSeries.push(0.775924145, 84.82300165)
  dataSeries.push(0.785613215, 85.8701992)
  dataSeries.push(0.793953486, 86.91739675)
  dataSeries.push(0.803095707, 87.9645943)
  dataSeries.push(0.811993958, 89.01179185)
  dataSeries.push(0.820780261, 90.0589894)
  dataSeries.push(0.829730698, 91.10618695)
  dataSeries.push(0.838749674, 92.15338451)
  dataSeries.push(0.847815059, 93.20058206)
  dataSeries.push(0.856960612, 94.24777961)
  dataSeries.push(0.866006714, 95.29497716)
  dataSeries.push(0.874910034, 96.34217471)
  dataSeries.push(0.883999749, 97.38937226)
  dataSeries.push(0.893140187, 98.43656981)
  dataSeries.push(0.902175715, 99.48376736)
  dataSeries.push(0.911383452, 100.5309649)
  dataSeries.push(0.920426998, 101.5781625)
  dataSeries.push(0.929456673, 102.62536)
  dataSeries.push(0.938468052, 103.6725576)
  dataSeries.push(0.947589434, 104.7197551)
  dataSeries.push(0.956809189, 105.7669527)
  dataSeries.push(0.966096447, 106.8141502)
  dataSeries.push(0.975242552, 107.8613478)
  dataSeries.push(0.984383898, 108.9085453)
  dataSeries.push(0.993441371, 109.9557429)
  dataSeries.push(1.002654403, 111.0029404)
  dataSeries.push(1.01191066, 112.050138)
  dataSeries.push(1.021192398, 113.0973355)
  dataSeries.push(1.030419932, 114.1445331)
  dataSeries.push(1.039487683, 115.1917306)
  dataSeries.push(1.04868003, 116.2389282)
  dataSeries.push(1.057966787, 117.2861257)
  dataSeries.push(1.067336084, 118.3333233)
  dataSeries.push(1.076716419, 119.3805208)
  dataSeries.push(1.086067771, 120.4277184)
  dataSeries.push(1.095315397, 121.4749159)
  dataSeries.push(1.104448131, 122.5221135)
  dataSeries.push(1.113734907, 123.569311)
  dataSeries.push(1.123103148, 124.6165086)
  dataSeries.push(1.132612764, 125.6637061)
  dataSeries.push(1.141891484, 126.7109037)
  dataSeries.push(1.151130518, 127.7581012)
  dataSeries.push(1.16043009, 128.8052988)
  dataSeries.push(1.169838425, 129.8524963)
  dataSeries.push(1.179333522, 130.8996939)
  dataSeries.push(1.188955549, 131.9468915)
  dataSeries.push(1.198398015, 132.994089)
  dataSeries.push(1.207586862, 134.0412866)
  dataSeries.push(1.216961826, 135.0884841)
  dataSeries.push(1.226370642, 136.1356817)
  dataSeries.push(1.235877962, 137.1828792)
  dataSeries.push(1.245496285, 138.2300768)
  dataSeries.push(1.254945696, 139.2772743)
  dataSeries.push(1.264341976, 140.3244719)
  dataSeries.push(1.273785701, 141.3716694)
  dataSeries.push(1.283392172, 142.418867)
  dataSeries.push(1.293037532, 143.4660645)
  dataSeries.push(1.302636391, 144.5132621)
  dataSeries.push(1.312148988, 145.5604596)
  dataSeries.push(1.321509192, 146.6076572)
  dataSeries.push(1.331006066, 147.6548547)
  dataSeries.push(1.340566813, 148.7020523)
  dataSeries.push(1.3502321, 149.7492498)
  dataSeries.push(1.359980519, 150.7964474)
  dataSeries.push(1.369596546, 151.8436449)
  dataSeries.push(1.379089994, 152.8908425)
  dataSeries.push(1.388719187, 153.93804)
  dataSeries.push(1.398553331, 154.9852376)
  dataSeries.push(1.408067244, 156.0324351)
  dataSeries.push(1.417839201, 157.0796327)
  dataSeries.push(1.427500637, 158.1268302)
  dataSeries.push(1.437013438, 159.1740278)
  dataSeries.push(1.446614816, 160.2212253)
  dataSeries.push(1.456336642, 161.2684229)
  dataSeries.push(1.466142619, 162.3156204)
  dataSeries.push(1.476054525, 163.362818)
  dataSeries.push(1.485875743, 164.4100155)
  dataSeries.push(1.495450324, 165.4572131)
  dataSeries.push(1.505132594, 166.5044106)
  dataSeries.push(1.514934645, 167.5516082)
  dataSeries.push(1.524736677, 168.5988057)
  dataSeries.push(1.534692899, 169.6460033)
  dataSeries.push(1.544453597, 170.6932008)
  dataSeries.push(1.554180016, 171.7403984)
  dataSeries.push(1.563938732, 172.7875959)
  dataSeries.push(1.573778283, 173.8347935)
  dataSeries.push(1.583837026, 174.881991)
  dataSeries.push(1.593868694, 175.9291886)
  dataSeries.push(1.603622892, 176.9763862)
  dataSeries.push(1.613346385, 178.0235837)
  dataSeries.push(1.623114731, 179.0707813)
  dataSeries.push(1.633077398, 180.1179788)
  dataSeries.push(1.643054268, 181.1651764)
  dataSeries.push(1.653166735, 182.2123739)
  dataSeries.push(1.663072585, 183.2595715)
  dataSeries.push(1.672910544, 184.306769)
  dataSeries.push(1.682856284, 185.3539666)
  dataSeries.push(1.692879656, 186.4011641)
  dataSeries.push(1.702892657, 187.4483617)
  dataSeries.push(1.713011939, 188.4955592)
  dataSeries.push(1.722956031, 189.5427568)
  dataSeries.push(1.73290542, 190.5899543)
  dataSeries.push(1.742824123, 191.6371519)
  dataSeries.push(1.752832884, 192.6843494)
  dataSeries.push(1.762981204, 193.731547)
  dataSeries.push(1.773200619, 194.7787445)
  dataSeries.push(1.783371718, 195.8259421)
  dataSeries.push(1.793310384, 196.8731396)
  dataSeries.push(1.803277532, 197.9203372)
  dataSeries.push(1.81336761, 198.9675347)
  dataSeries.push(1.82355469, 200.0147323)
  dataSeries.push(1.833878404, 201.0619298)
  dataSeries.push(1.843990593, 202.1091274)
  dataSeries.push(1.854018576, 203.1563249)
  dataSeries.push(1.864139501, 204.2035225)
  dataSeries.push(1.874303908, 205.25072)
  dataSeries.push(1.884755695, 206.2979176)
  dataSeries.push(1.895014532, 207.3451151)
  dataSeries.push(1.905196774, 208.3923127)
  dataSeries.push(1.915241178, 209.4395102)
  dataSeries.push(1.925765282, 210.4867078)
  dataSeries.push(1.935653441, 211.5339053)
  dataSeries.push(1.946034744, 212.5811029)
  dataSeries.push(1.956463382, 213.6283004)
  dataSeries.push(1.966728403, 214.675498)
  dataSeries.push(1.976873347, 215.7226955)
  dataSeries.push(1.987195593, 216.7698931)
  dataSeries.push(1.997677121, 217.8170906)
  dataSeries.push(2.007913975, 218.8642882)
  dataSeries.push(2.01841843, 219.9114858)
  dataSeries.push(2.028724323, 220.9586833)
  dataSeries.push(2.038960029, 222.0058809)
  dataSeries.push(2.049296979, 223.0530784)
  dataSeries.push(2.059709079, 224.100276)
  dataSeries.push(2.07020983, 225.1474735)
  dataSeries.push(2.080774175, 226.1946711)
  dataSeries.push(2.091285815, 227.2418686)
  dataSeries.push(2.101523706, 228.2890662)
  dataSeries.push(2.111897139, 229.3362637)
  dataSeries.push(2.122329592, 230.3834613)
  dataSeries.push(2.132907159, 231.4306588)
  dataSeries.push(2.143543784, 232.4778564)
  dataSeries.push(2.153975644, 233.5250539)
  dataSeries.push(2.164344687, 234.5722515)
  dataSeries.push(2.174775103, 235.619449)
  dataSeries.push(2.18537006, 236.6666466)
  dataSeries.push(2.196043798, 237.7138441)
  dataSeries.push(2.206787001, 238.7610417)
  dataSeries.push(2.217289863, 239.8082392)
  dataSeries.push(2.227728464, 240.8554368)
  dataSeries.push(2.238242456, 241.9026343)
  dataSeries.push(2.248834265, 242.9498319)
  dataSeries.push(2.259552782, 243.9970294)
  dataSeries.push(2.270334671, 245.044227)
  dataSeries.push(2.28104578, 246.0914245)
  dataSeries.push(2.291509178, 247.1386221)
  dataSeries.push(2.302206342, 248.1858196)
  dataSeries.push(2.312773854, 249.2330172)
  dataSeries.push(2.32357041, 250.2802147)
  dataSeries.push(2.334544378, 251.3274123)
  dataSeries.push(2.345140057, 252.3746098)
  dataSeries.push(2.355704773, 253.4218074)
  dataSeries.push(2.366406178, 254.4690049)
  dataSeries.push(2.388077828, 255.5162025)
  dataSeries.push(2.377112731, 256.5634)
  dataSeries.push(2.39905287, 257.6105976)
  dataSeries.push(2.409725663, 258.6577951)
  dataSeries.push(2.420345677, 259.7049927)
  dataSeries.push(2.431094398, 260.7521902)
  dataSeries.push(2.441909455, 261.7993878)
  dataSeries.push(2.452858737, 262.8465854)
  dataSeries.push(2.46391706, 263.8937829)
  dataSeries.push(2.474722505, 264.9409805)
  dataSeries.push(2.485543876, 265.988178)
  dataSeries.push(2.496390896, 267.0353756)
  dataSeries.push(2.507331067, 268.0825731)
  dataSeries.push(2.518307257, 269.1297707)
  dataSeries.push(2.52936871, 270.1769682)
  dataSeries.push(2.540211545, 271.2241658)
  dataSeries.push(2.55104188, 272.2713633)
  dataSeries.push(2.561913586, 273.3185609)
  dataSeries.push(2.572876128, 274.3657584)
  dataSeries.push(2.584076195, 275.412956)
  dataSeries.push(2.595270059, 276.4601535)
  dataSeries.push(2.606227046, 277.5073511)
  dataSeries.push(2.617122716, 278.5545486)
  dataSeries.push(2.62804022, 279.6017462)
  dataSeries.push(2.639098413, 280.6489437)
  dataSeries.push(2.650230275, 281.6961413)
  dataSeries.push(2.661440194, 282.7433388)
  dataSeries.push(2.672453812, 283.7905364)
  dataSeries.push(2.683516412, 284.8377339)
  dataSeries.push(2.694514381, 285.8849315)
  dataSeries.push(2.705519036, 286.932129)
  dataSeries.push(2.716609823, 287.9793266)
  dataSeries.push(2.727709332, 289.0265241)
  dataSeries.push(2.738516481, 290.0737217)
  dataSeries.push(2.749224035, 291.1209192)
  dataSeries.push(2.7599462, 292.1681168)
  reportAll(dataSeries)
  dataSeries.push(2.7707152, 293.2153143)
})

function testCoefficientA (series, expectedValue) {
  assert.ok(series.coefficientA() === expectedValue, `Expected value for coefficientA at X-position ${series.xAtSeriesEnd()} is ${expectedValue}, encountered a ${series.coefficientA()}`)
}

function testCoefficientB (series, expectedValue) {
  assert.ok(series.coefficientB() === expectedValue, `Expected value for coefficientB at X-position ${series.xAtSeriesEnd()} is ${expectedValue}, encountered a ${series.coefficientB()}`)
}

function testCoefficientC (series, expectedValue) {
  assert.ok(series.coefficientC() === expectedValue, `Expected value for coefficientC at X-position ${series.xAtSeriesEnd()} is ${expectedValue}, encountered a ${series.coefficientC()}`)
}

function testSlope (series, position, expectedValue) {
  assert.ok(series.slope(position) === expectedValue, `Expected value for Slope-${position} at X-position ${series.xAtSeriesEnd()} (slope at X-position ${series.xAtPosition(position)}) is ${expectedValue}, encountered a ${series.slope(position)}`)
}

function reportAll (series) {
  assert.ok(series.coefficientA() === 99, `time: ${series.xAtSeriesEnd()}, coefficientA: ${series.coefficientA()}, coefficientB: ${series.coefficientB()}, Slope-10: ${series.slope(10)}, Slope-9: ${series.slope(9)}, Slope-8: ${series.slope(8)}, Slope-7: ${series.slope(7)}, Slope-6: ${series.slope(6)}, Slope-5: ${series.slope(5)}, Slope-4: ${series.slope(4)}, Slope-3: ${series.slope(3)}, Slope-2: ${series.slope(2)}, Slope-1: ${series.slope(1)}, Slope-0: ${series.slope(0)}`)
}

test.run()
